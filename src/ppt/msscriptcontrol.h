/****************************************************************************
**
** Namespace MSScriptControl generated by dumpcpp from type library
** C:\WINDOWS\system32\msscript.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_MSSCRIPTCONTROL_H
#define QAX_DUMPCPP_MSSCRIPTCONTROL_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef MSSCRIPTCONTROL_EXPORT
#define MSSCRIPTCONTROL_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace MSScriptControl {

    enum ScriptControlStates {
        Initialized             = 0,
        Connected               = 1
    };

// forward declarations
    enum ScriptControlStates;
    enum ScriptControlStates;
    class IScriptProcedure;
    class IScriptProcedureCollection;
    class IScriptModule;
    class IScriptModuleCollection;
    class IScriptError;

class MSSCRIPTCONTROL_EXPORT IScriptProcedure : public QAxObject
{
public:
    IScriptProcedure(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property HasReturnValue

    True if procedure returns a value
For more information, see help context 1130313 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline bool HasReturnValue() const; //Returns the value of HasReturnValue

    /*
    Property Name

    Name of the procedure
For more information, see help context 1130253 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NumArgs

    Number of arguments that are expected
For more information, see help context 1130312 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int NumArgs() const; //Returns the value of NumArgs

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT IScriptProcedureCollection : public QAxObject
{
public:
    IScriptProcedureCollection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Number of procedures
For more information, see help context 1130260 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum

    For more information, see help context 0 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Get a procedure indexed by position or procedure name
For more information, see help context 1130258 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptProcedure* Item(const QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT IScriptModule : public QAxObject
{
public:
    IScriptModule(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property CodeObject

    Object exposed by the scripting engine that contains methods and properties defined in the code added to the module
For more information, see help context 1130250 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline IDispatch* CodeObject() const; //Returns the value of CodeObject

    /*
    Property Name

    Name of the module
For more information, see help context 1130253 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Procedures

    Collection of procedures that are defined in the module
For more information, see help context 1130251 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptProcedureCollection* Procedures() const; //Returns the value of Procedures

    /*
    Method AddCode

    Add code to the module
For more information, see help context 1130247 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void AddCode(const QString& Code);

    /*
    Method Eval

    Evaluate an expression within the context of the module
For more information, see help context 1130252 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QVariant Eval(const QString& Expression);

    /*
    Method ExecuteStatement

    Execute a statement within the context of the module
For more information, see help context 1130248 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void ExecuteStatement(const QString& Statement);

    /*
    Method Run

    Call a procedure defined in the module
For more information, see help context 1130249 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QVariant Run(const QString& ProcedureName, QVariantList& Parameters);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT IScriptModuleCollection : public QAxObject
{
public:
    IScriptModuleCollection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Number of modules
For more information, see help context 1130260 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum

    For more information, see help context 0 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    Add a new module
For more information, see help context 1130257 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptModule* Add(const QString& Name);

    /*
    Method Add

    Add a new module
For more information, see help context 1130257 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptModule* Add(const QString& Name, QVariant& Object);

    /*
    Method Item

    Get a module indexed by position or module name
For more information, see help context 1130258 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptModule* Item(const QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT IScriptError : public QAxObject
{
public:
    IScriptError(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Column

    Source code column position where the error occurred
For more information, see help context 1130167 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Column() const; //Returns the value of Column

    /*
    Property Description

    Friendly description of error
For more information, see help context 1130168 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property HelpContext

    Context ID for the topic with information on the error
For more information, see help context 1130169 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int HelpContext() const; //Returns the value of HelpContext

    /*
    Property HelpFile

    File in which help for the error can be found
For more information, see help context 1130170 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString HelpFile() const; //Returns the value of HelpFile

    /*
    Property Line

    Source code line number where the error occurred
For more information, see help context 1130171 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Line() const; //Returns the value of Line

    /*
    Property Number

    Error number
For more information, see help context 1130172 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Number() const; //Returns the value of Number

    /*
    Property Source

    Source of the error
For more information, see help context 1130173 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Source() const; //Returns the value of Source

    /*
    Property Text

    Line of source code on which the error occurred
For more information, see help context 1130174 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Method Clear

    Clear the script error
For more information, see help context 1130318 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void Clear();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT IScriptControl : public QAxObject
{
public:
    IScriptControl(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AllowUI

    Enable or disable display of the UI
For more information, see help context 1130314 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline bool AllowUI() const; //Returns the value of AllowUI
    inline void SetAllowUI(bool value); //Sets the value of the AllowUI property

    /*
    Property CodeObject

    Object exposed by the scripting engine that contains methods and properties defined in the code added to the global module
For more information, see help context 1130250 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline IDispatch* CodeObject() const; //Returns the value of CodeObject

    /*
    Property Error

    The last error reported by the scripting engine
For more information, see help context 1130321 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptError* Error() const; //Returns the value of Error

    /*
    Property Language

    Language engine to use
For more information, see help context 1130322 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Language() const; //Returns the value of Language
    inline void SetLanguage(const QString& value); //Sets the value of the Language property

    /*
    Property Modules

    Collection of modules for the ScriptControl
For more information, see help context 1130323 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptModuleCollection* Modules() const; //Returns the value of Modules

    /*
    Property Procedures

    Collection of procedures that are defined in the global module
For more information, see help context 1130251 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptProcedureCollection* Procedures() const; //Returns the value of Procedures

    /*
    Property SitehWnd

    hWnd used as a parent for displaying UI
For more information, see help context 1130324 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int SitehWnd() const; //Returns the value of SitehWnd
    inline void SetSitehWnd(int value); //Sets the value of the SitehWnd property

    /*
    Property State

    State of the control
For more information, see help context 1130325 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::ScriptControlStates State() const; //Returns the value of State
    inline void SetState(MSScriptControl::ScriptControlStates value); //Sets the value of the State property

    /*
    Property Timeout

    Length of time in milliseconds that a script can execute before being considered hung
For more information, see help context 1130326 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Timeout() const; //Returns the value of Timeout
    inline void SetTimeout(int value); //Sets the value of the Timeout property

    /*
    Property UseSafeSubset

    Force script to execute in safe mode and disallow potentially harmful actions
For more information, see help context 1130327 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline bool UseSafeSubset() const; //Returns the value of UseSafeSubset
    inline void SetUseSafeSubset(bool value); //Sets the value of the UseSafeSubset property

    /*
    Method AddCode

    Add code to the global module
For more information, see help context 1130247 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void AddCode(const QString& Code);

    /*
    Method AddObject

    Add an object to the global namespace of the scripting engine
For more information, see help context 1130317 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void AddObject(const QString& Name, IDispatch* Object);

    /*
    Method AddObject

    Add an object to the global namespace of the scripting engine
For more information, see help context 1130317 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void AddObject(const QString& Name, IDispatch* Object, bool AddMembers);

    /*
    Method Eval

    Evaluate an expression within the context of the global module
For more information, see help context 1130252 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QVariant Eval(const QString& Expression);

    /*
    Method ExecuteStatement

    Execute a statement within the context of the global module
For more information, see help context 1130248 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void ExecuteStatement(const QString& Statement);

    /*
    Method Reset

    Reset the scripting engine to a newly created state
For more information, see help context 1130318 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void Reset();

    /*
    Method Run

    Call a procedure defined in the global module
For more information, see help context 1130249 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QVariant Run(const QString& ProcedureName, QVariantList& Parameters);

    /*
    Method _AboutBox

    For more information, see help context 0 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void _AboutBox();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT DScriptControlSource : public QAxObject
{
public:
    DScriptControlSource(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Error

    Event fired when any error occurs in the scripting engine
For more information, see help context 1130320 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void Error();

    /*
    Method Timeout

    Event fired when a script is aborted because of a timeout
For more information, see help context 1130319 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void Timeout();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class MSSCRIPTCONTROL_EXPORT Procedure : public QAxObject
{
public:
    Procedure(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property HasReturnValue

    True if procedure returns a value
For more information, see help context 1130313 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline bool HasReturnValue() const; //Returns the value of HasReturnValue

    /*
    Property Name

    Name of the procedure
For more information, see help context 1130253 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property NumArgs

    Number of arguments that are expected
For more information, see help context 1130312 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int NumArgs() const; //Returns the value of NumArgs

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT Procedures : public QAxObject
{
public:
    Procedures(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Number of procedures
For more information, see help context 1130260 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum

    For more information, see help context 0 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    Get a procedure indexed by position or procedure name
For more information, see help context 1130258 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptProcedure* Item(const QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT Module : public QAxObject
{
public:
    Module(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property CodeObject

    Object exposed by the scripting engine that contains methods and properties defined in the code added to the module
For more information, see help context 1130250 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline IDispatch* CodeObject() const; //Returns the value of CodeObject

    /*
    Property Name

    Name of the module
For more information, see help context 1130253 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Procedures

    Collection of procedures that are defined in the module
For more information, see help context 1130251 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptProcedureCollection* Procedures() const; //Returns the value of Procedures

    /*
    Method AddCode

    Add code to the module
For more information, see help context 1130247 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void AddCode(const QString& Code);

    /*
    Method Eval

    Evaluate an expression within the context of the module
For more information, see help context 1130252 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QVariant Eval(const QString& Expression);

    /*
    Method ExecuteStatement

    Execute a statement within the context of the module
For more information, see help context 1130248 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void ExecuteStatement(const QString& Statement);

    /*
    Method Run

    Call a procedure defined in the module
For more information, see help context 1130249 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QVariant Run(const QString& ProcedureName, QVariantList& Parameters);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT Modules : public QAxObject
{
public:
    Modules(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Number of modules
For more information, see help context 1130260 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum

    For more information, see help context 0 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Add

    Add a new module
For more information, see help context 1130257 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptModule* Add(const QString& Name);

    /*
    Method Add

    Add a new module
For more information, see help context 1130257 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptModule* Add(const QString& Name, QVariant& Object);

    /*
    Method Item

    Get a module indexed by position or module name
For more information, see help context 1130258 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptModule* Item(const QVariant& Index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT Error : public QAxObject
{
public:
    Error(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Column

    Source code column position where the error occurred
For more information, see help context 1130167 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Column() const; //Returns the value of Column

    /*
    Property Description

    Friendly description of error
For more information, see help context 1130168 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Description() const; //Returns the value of Description

    /*
    Property HelpContext

    Context ID for the topic with information on the error
For more information, see help context 1130169 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int HelpContext() const; //Returns the value of HelpContext

    /*
    Property HelpFile

    File in which help for the error can be found
For more information, see help context 1130170 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString HelpFile() const; //Returns the value of HelpFile

    /*
    Property Line

    Source code line number where the error occurred
For more information, see help context 1130171 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Line() const; //Returns the value of Line

    /*
    Property Number

    Error number
For more information, see help context 1130172 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Number() const; //Returns the value of Number

    /*
    Property Source

    Source of the error
For more information, see help context 1130173 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Source() const; //Returns the value of Source

    /*
    Property Text

    Line of source code on which the error occurred
For more information, see help context 1130174 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Method Clear

    Clear the script error
For more information, see help context 1130318 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void Clear();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MSSCRIPTCONTROL_EXPORT ScriptControl : public QAxWidget
{
public:
    ScriptControl(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{0e59f1d5-1fbe-11d0-8ff2-00a0d10038bc}");
    }

    /*
    Property AllowUI

    Enable or disable display of the UI
For more information, see help context 1130314 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline bool AllowUI() const; //Returns the value of AllowUI
    inline void SetAllowUI(bool value); //Sets the value of the AllowUI property

    /*
    Property CodeObject

    Object exposed by the scripting engine that contains methods and properties defined in the code added to the global module
For more information, see help context 1130250 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline IDispatch* CodeObject() const; //Returns the value of CodeObject

    /*
    Property Error

    The last error reported by the scripting engine
For more information, see help context 1130321 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptError* Error() const; //Returns the value of Error

    /*
    Property Language

    Language engine to use
For more information, see help context 1130322 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QString Language() const; //Returns the value of Language
    inline void SetLanguage(const QString& value); //Sets the value of the Language property

    /*
    Property Modules

    Collection of modules for the ScriptControl
For more information, see help context 1130323 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptModuleCollection* Modules() const; //Returns the value of Modules

    /*
    Property Procedures

    Collection of procedures that are defined in the global module
For more information, see help context 1130251 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::IScriptProcedureCollection* Procedures() const; //Returns the value of Procedures

    /*
    Property SitehWnd

    hWnd used as a parent for displaying UI
For more information, see help context 1130324 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int SitehWnd() const; //Returns the value of SitehWnd
    inline void SetSitehWnd(int value); //Sets the value of the SitehWnd property

    /*
    Property State

    State of the control
For more information, see help context 1130325 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline MSScriptControl::ScriptControlStates State() const; //Returns the value of State
    inline void SetState(MSScriptControl::ScriptControlStates value); //Sets the value of the State property

    /*
    Property Timeout

    Length of time in milliseconds that a script can execute before being considered hung
For more information, see help context 1130326 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline int Timeout() const; //Returns the value of Timeout
    inline void SetTimeout(int value); //Sets the value of the Timeout property

    /*
    Property UseSafeSubset

    Force script to execute in safe mode and disallow potentially harmful actions
For more information, see help context 1130327 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline bool UseSafeSubset() const; //Returns the value of UseSafeSubset
    inline void SetUseSafeSubset(bool value); //Sets the value of the UseSafeSubset property

    /*
    Method AddCode

    Add code to the global module
For more information, see help context 1130247 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void AddCode(const QString& Code);

    /*
    Method AddObject

    Add an object to the global namespace of the scripting engine
For more information, see help context 1130317 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void AddObject(const QString& Name, IDispatch* Object);

    /*
    Method AddObject

    Add an object to the global namespace of the scripting engine
For more information, see help context 1130317 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void AddObject(const QString& Name, IDispatch* Object, bool AddMembers);

    /*
    Method Eval

    Evaluate an expression within the context of the global module
For more information, see help context 1130252 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QVariant Eval(const QString& Expression);

    /*
    Method ExecuteStatement

    Execute a statement within the context of the global module
For more information, see help context 1130248 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void ExecuteStatement(const QString& Statement);

    /*
    Method Reset

    Reset the scripting engine to a newly created state
For more information, see help context 1130318 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void Reset();

    /*
    Method Run

    Call a procedure defined in the global module
For more information, see help context 1130249 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline QVariant Run(const QString& ProcedureName, QVariantList& Parameters);

    /*
    Method _AboutBox

    For more information, see help context 0 in C:\WINDOWS\system32\MSSCRIPT.HLP.
    */
    inline void _AboutBox();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_MSSCRIPTCONTROL_NOINLINES
inline bool IScriptProcedure::HasReturnValue() const
{
    QVariant qax_result = property("HasReturnValue");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IScriptProcedure::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IScriptProcedure::NumArgs() const
{
    QVariant qax_result = property("NumArgs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}


inline int IScriptProcedureCollection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IScriptProcedureCollection::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline MSScriptControl::IScriptProcedure* IScriptProcedureCollection::Item(const QVariant& Index)
{
    MSScriptControl::IScriptProcedure* qax_result = 0;
    qRegisterMetaType("IScriptProcedure*", &qax_result);
    qRegisterMetaType("IScriptProcedure", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}


inline IDispatch* IScriptModule::CodeObject() const
{
    QVariant qax_result = property("CodeObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString IScriptModule::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MSScriptControl::IScriptProcedureCollection* IScriptModule::Procedures() const
{
    MSScriptControl::IScriptProcedureCollection* qax_pointer = 0;
    qRegisterMetaType("IScriptProcedureCollection*", &qax_pointer);
    qRegisterMetaType("IScriptProcedureCollection", qax_pointer);
    QVariant qax_result = property("Procedures");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::IScriptProcedureCollection**)qax_result.constData();
}

inline void IScriptModule::AddCode(const QString& Code)
{
    void *_a[] = {0, (void*)&Code};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline QVariant IScriptModule::Eval(const QString& Expression)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Expression};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IScriptModule::ExecuteStatement(const QString& Statement)
{
    void *_a[] = {0, (void*)&Statement};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline QVariant IScriptModule::Run(const QString& ProcedureName, QVariantList& Parameters)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProcedureName, (void*)&Parameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline int IScriptModuleCollection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IScriptModuleCollection::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline MSScriptControl::IScriptModule* IScriptModuleCollection::Add(const QString& Name)
{
    MSScriptControl::IScriptModule* qax_result = 0;
    qRegisterMetaType("IScriptModule*", &qax_result);
    qRegisterMetaType("IScriptModule", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline MSScriptControl::IScriptModule* IScriptModuleCollection::Add(const QString& Name, QVariant& Object)
{
    MSScriptControl::IScriptModule* qax_result = 0;
    qRegisterMetaType("IScriptModule*", &qax_result);
    qRegisterMetaType("IScriptModule", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MSScriptControl::IScriptModule* IScriptModuleCollection::Item(const QVariant& Index)
{
    MSScriptControl::IScriptModule* qax_result = 0;
    qRegisterMetaType("IScriptModule*", &qax_result);
    qRegisterMetaType("IScriptModule", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int IScriptError::Column() const
{
    QVariant qax_result = property("Column");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IScriptError::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IScriptError::HelpContext() const
{
    QVariant qax_result = property("HelpContext");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IScriptError::HelpFile() const
{
    QVariant qax_result = property("HelpFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IScriptError::Line() const
{
    QVariant qax_result = property("Line");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IScriptError::Number() const
{
    QVariant qax_result = property("Number");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IScriptError::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IScriptError::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IScriptError::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline bool IScriptControl::AllowUI() const
{
    QVariant qax_result = property("AllowUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IScriptControl::SetAllowUI(bool value){ setProperty("AllowUI", QVariant(value)); }

inline IDispatch* IScriptControl::CodeObject() const
{
    QVariant qax_result = property("CodeObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline MSScriptControl::IScriptError* IScriptControl::Error() const
{
    MSScriptControl::IScriptError* qax_pointer = 0;
    qRegisterMetaType("IScriptError*", &qax_pointer);
    qRegisterMetaType("IScriptError", qax_pointer);
    QVariant qax_result = property("Error");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::IScriptError**)qax_result.constData();
}

inline QString IScriptControl::Language() const
{
    QVariant qax_result = property("Language");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IScriptControl::SetLanguage(const QString& value){ setProperty("Language", QVariant(value)); }

inline MSScriptControl::IScriptModuleCollection* IScriptControl::Modules() const
{
    MSScriptControl::IScriptModuleCollection* qax_pointer = 0;
    qRegisterMetaType("IScriptModuleCollection*", &qax_pointer);
    qRegisterMetaType("IScriptModuleCollection", qax_pointer);
    QVariant qax_result = property("Modules");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::IScriptModuleCollection**)qax_result.constData();
}

inline MSScriptControl::IScriptProcedureCollection* IScriptControl::Procedures() const
{
    MSScriptControl::IScriptProcedureCollection* qax_pointer = 0;
    qRegisterMetaType("IScriptProcedureCollection*", &qax_pointer);
    qRegisterMetaType("IScriptProcedureCollection", qax_pointer);
    QVariant qax_result = property("Procedures");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::IScriptProcedureCollection**)qax_result.constData();
}

inline int IScriptControl::SitehWnd() const
{
    QVariant qax_result = property("SitehWnd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IScriptControl::SetSitehWnd(int value){ setProperty("SitehWnd", QVariant(value)); }

inline MSScriptControl::ScriptControlStates IScriptControl::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::ScriptControlStates*)qax_result.constData();
}
inline void IScriptControl::SetState(MSScriptControl::ScriptControlStates value){ setProperty("State", QVariant(value)); }

inline int IScriptControl::Timeout() const
{
    QVariant qax_result = property("Timeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IScriptControl::SetTimeout(int value){ setProperty("Timeout", QVariant(value)); }

inline bool IScriptControl::UseSafeSubset() const
{
    QVariant qax_result = property("UseSafeSubset");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IScriptControl::SetUseSafeSubset(bool value){ setProperty("UseSafeSubset", QVariant(value)); }

inline void IScriptControl::AddCode(const QString& Code)
{
    void *_a[] = {0, (void*)&Code};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void IScriptControl::AddObject(const QString& Name, IDispatch* Object)
{
    void *_a[] = {0, (void*)&Name, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IScriptControl::AddObject(const QString& Name, IDispatch* Object, bool AddMembers)
{
    void *_a[] = {0, (void*)&Name, (void*)&Object, (void*)&AddMembers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline QVariant IScriptControl::Eval(const QString& Expression)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Expression};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IScriptControl::ExecuteStatement(const QString& Statement)
{
    void *_a[] = {0, (void*)&Statement};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IScriptControl::Reset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline QVariant IScriptControl::Run(const QString& ProcedureName, QVariantList& Parameters)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProcedureName, (void*)&Parameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IScriptControl::_AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline void DScriptControlSource::Error()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void DScriptControlSource::Timeout()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline bool Procedure::HasReturnValue() const
{
    QVariant qax_result = property("HasReturnValue");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString Procedure::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Procedure::NumArgs() const
{
    QVariant qax_result = property("NumArgs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}


inline int Procedures::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* Procedures::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline MSScriptControl::IScriptProcedure* Procedures::Item(const QVariant& Index)
{
    MSScriptControl::IScriptProcedure* qax_result = 0;
    qRegisterMetaType("IScriptProcedure*", &qax_result);
    qRegisterMetaType("IScriptProcedure", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}


inline IDispatch* Module::CodeObject() const
{
    QVariant qax_result = property("CodeObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline QString Module::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MSScriptControl::IScriptProcedureCollection* Module::Procedures() const
{
    MSScriptControl::IScriptProcedureCollection* qax_pointer = 0;
    qRegisterMetaType("IScriptProcedureCollection*", &qax_pointer);
    qRegisterMetaType("IScriptProcedureCollection", qax_pointer);
    QVariant qax_result = property("Procedures");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::IScriptProcedureCollection**)qax_result.constData();
}

inline void Module::AddCode(const QString& Code)
{
    void *_a[] = {0, (void*)&Code};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline QVariant Module::Eval(const QString& Expression)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Expression};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void Module::ExecuteStatement(const QString& Statement)
{
    void *_a[] = {0, (void*)&Statement};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline QVariant Module::Run(const QString& ProcedureName, QVariantList& Parameters)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProcedureName, (void*)&Parameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline int Modules::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* Modules::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline MSScriptControl::IScriptModule* Modules::Add(const QString& Name)
{
    MSScriptControl::IScriptModule* qax_result = 0;
    qRegisterMetaType("IScriptModule*", &qax_result);
    qRegisterMetaType("IScriptModule", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline MSScriptControl::IScriptModule* Modules::Add(const QString& Name, QVariant& Object)
{
    MSScriptControl::IScriptModule* qax_result = 0;
    qRegisterMetaType("IScriptModule*", &qax_result);
    qRegisterMetaType("IScriptModule", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MSScriptControl::IScriptModule* Modules::Item(const QVariant& Index)
{
    MSScriptControl::IScriptModule* qax_result = 0;
    qRegisterMetaType("IScriptModule*", &qax_result);
    qRegisterMetaType("IScriptModule", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int Error::Column() const
{
    QVariant qax_result = property("Column");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Error::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Error::HelpContext() const
{
    QVariant qax_result = property("HelpContext");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Error::HelpFile() const
{
    QVariant qax_result = property("HelpFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Error::Line() const
{
    QVariant qax_result = property("Line");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Error::Number() const
{
    QVariant qax_result = property("Number");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Error::Source() const
{
    QVariant qax_result = property("Source");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Error::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void Error::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}


inline bool ScriptControl::AllowUI() const
{
    QVariant qax_result = property("AllowUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ScriptControl::SetAllowUI(bool value){ setProperty("AllowUI", QVariant(value)); }

inline IDispatch* ScriptControl::CodeObject() const
{
    QVariant qax_result = property("CodeObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline MSScriptControl::IScriptError* ScriptControl::Error() const
{
    MSScriptControl::IScriptError* qax_pointer = 0;
    qRegisterMetaType("IScriptError*", &qax_pointer);
    qRegisterMetaType("IScriptError", qax_pointer);
    QVariant qax_result = property("Error");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::IScriptError**)qax_result.constData();
}

inline QString ScriptControl::Language() const
{
    QVariant qax_result = property("Language");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ScriptControl::SetLanguage(const QString& value){ setProperty("Language", QVariant(value)); }

inline MSScriptControl::IScriptModuleCollection* ScriptControl::Modules() const
{
    MSScriptControl::IScriptModuleCollection* qax_pointer = 0;
    qRegisterMetaType("IScriptModuleCollection*", &qax_pointer);
    qRegisterMetaType("IScriptModuleCollection", qax_pointer);
    QVariant qax_result = property("Modules");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::IScriptModuleCollection**)qax_result.constData();
}

inline MSScriptControl::IScriptProcedureCollection* ScriptControl::Procedures() const
{
    MSScriptControl::IScriptProcedureCollection* qax_pointer = 0;
    qRegisterMetaType("IScriptProcedureCollection*", &qax_pointer);
    qRegisterMetaType("IScriptProcedureCollection", qax_pointer);
    QVariant qax_result = property("Procedures");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::IScriptProcedureCollection**)qax_result.constData();
}

inline int ScriptControl::SitehWnd() const
{
    QVariant qax_result = property("SitehWnd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ScriptControl::SetSitehWnd(int value){ setProperty("SitehWnd", QVariant(value)); }

inline MSScriptControl::ScriptControlStates ScriptControl::State() const
{
    QVariant qax_result = property("State");
    Q_ASSERT(qax_result.isValid());
    return *(MSScriptControl::ScriptControlStates*)qax_result.constData();
}
inline void ScriptControl::SetState(MSScriptControl::ScriptControlStates value){ setProperty("State", QVariant(value)); }

inline int ScriptControl::Timeout() const
{
    QVariant qax_result = property("Timeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ScriptControl::SetTimeout(int value){ setProperty("Timeout", QVariant(value)); }

inline bool ScriptControl::UseSafeSubset() const
{
    QVariant qax_result = property("UseSafeSubset");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ScriptControl::SetUseSafeSubset(bool value){ setProperty("UseSafeSubset", QVariant(value)); }

inline void ScriptControl::AddCode(const QString& Code)
{
    void *_a[] = {0, (void*)&Code};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void ScriptControl::AddObject(const QString& Name, IDispatch* Object)
{
    void *_a[] = {0, (void*)&Name, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void ScriptControl::AddObject(const QString& Name, IDispatch* Object, bool AddMembers)
{
    void *_a[] = {0, (void*)&Name, (void*)&Object, (void*)&AddMembers};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline QVariant ScriptControl::Eval(const QString& Expression)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Expression};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline void ScriptControl::ExecuteStatement(const QString& Statement)
{
    void *_a[] = {0, (void*)&Statement};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void ScriptControl::Reset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline QVariant ScriptControl::Run(const QString& ProcedureName, QVariantList& Parameters)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProcedureName, (void*)&Parameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void ScriptControl::_AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}



#endif

}

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::IScriptProcedure *t)
{ Q_ASSERT(!t); return new MSScriptControl::IScriptProcedure; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::IScriptProcedureCollection *t)
{ Q_ASSERT(!t); return new MSScriptControl::IScriptProcedureCollection; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::IScriptModule *t)
{ Q_ASSERT(!t); return new MSScriptControl::IScriptModule; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::IScriptModuleCollection *t)
{ Q_ASSERT(!t); return new MSScriptControl::IScriptModuleCollection; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::IScriptError *t)
{ Q_ASSERT(!t); return new MSScriptControl::IScriptError; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::IScriptControl *t)
{ Q_ASSERT(!t); return new MSScriptControl::IScriptControl; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::DScriptControlSource *t)
{ Q_ASSERT(!t); return new MSScriptControl::DScriptControlSource; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::Procedure *t)
{ Q_ASSERT(!t); return new MSScriptControl::Procedure; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::Procedures *t)
{ Q_ASSERT(!t); return new MSScriptControl::Procedures; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::Module *t)
{ Q_ASSERT(!t); return new MSScriptControl::Module; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::Modules *t)
{ Q_ASSERT(!t); return new MSScriptControl::Modules; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::Error *t)
{ Q_ASSERT(!t); return new MSScriptControl::Error; }

template<>
inline void *qMetaTypeConstructHelper(const MSScriptControl::ScriptControl *t)
{ Q_ASSERT(!t); return new MSScriptControl::ScriptControl; }

#endif

