<!DOCTYPE html> 
<html manifest="/www/tablet/cache.manifest"> 
	<head>
	<title>DViz Tablet Song App</title> 
	<!--<meta name="viewport" content="width=device-width, initial-scale=1">-->
	<meta name="viewport" content="width=device-width, user-scalable=no" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="default" /> <!--The values for content are default, black and black-translucent-->
	<link rel="apple-touch-icon" href="/www/tablet/apple-touch-icon.png" /> <!-- If you don't want the glossy finish applied automatically, use apple-touch-icon-precomposed instead of apple-touch-icon. -->
		<!--114x114 .png file - On older iPhones, which used 56x56 icons, and the iPad, which uses 72x72 icons, the graphic automatically scales down.--> 
	<link rel="apple-touch-startup-image" href="/www/tablet/startup.png" />
		<!--The file must be exactly 320x460, or else the iPhone ignores it. (The iPad requires 1004x768.)--> 
	
	 
	<!--<link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.0/jquery.mobile-1.1.0.min.css" />
	<script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
	<script src="http://code.jquery.com/mobile/1.1.0/jquery.mobile-1.1.0.min.js"></script>-->
	<link rel="stylesheet" href="/www/jquery.mobile-1.1.0/jquery.mobile-1.1.0.min.css" />
	<script src="/www/jquery-1.7.1.min.js"></script>
	<script src="/www/jquery.mobile-1.1.0/jquery.mobile-1.1.0.min.js"></script>
		
	<style>
	.localnav {
		margin:0 0 0px 0;
		overflow:hidden;
	}
	.localnav li {
		float:left;
	}
	.localnav .ui-btn-inner { 
		padding: .6em 10px; 
		font-size:80%; 
	}
	
	.content-view {
		padding: 10px;
		margin-left: 20px;
	}
	#tablet-switcher {
		margin-left: 20px;
		margin-bottom: 15px;
	}
	
	#song-search.ui-field-contain .ui-input-search {
		width: 77%;
	}
	
	#result-list-box .hint {
		font-size: .95em;
		color: rgb(100,100,100);
		font-style: italic;
		padding-left: 2em;
	}
	
	#add-item-btn {
		float: left;
		margin-top: 0em;
		margin-right: 1.5em;
		
	}
	
	#preview-notice {
		padding-top: 1em;
	}
	
	#song-content {
		font-size: 1.2em;
	}
	
	#song-content .song-tag-main,
	#song-content .song-tag-rear {
		font-weight: bold;
		background: red;
		color: white;
		text-shadow: none;
		padding-right: .1em;
	}
	
	#song-content .song-tag-rear {
		background: blue;
	}
	
	#song-content .song-text-block-live {
		outline: 3px dotted red;
	}
	
	#song-content .song-text-block {
		font-family: Monospace !important;
	}
	
	/* Style the padding between blocks as an outer block so when we call scrollIntoView() we can have some padding while still retaining the outline tight around the block */
	#song-content .song-file-block {
		padding-bottom: 2em;
	}
	
	#page-table.onecol .content-view,
	#page-table.onecol #tablet-switcher { 
		margin-left: 0px;
	}
	
	#conlost {
		z-index: 999;
		width:20em;
		padding: .5em 2em 2em 2em;
	}
	
	</style>
</head> 
<body> 

<div data-role="page" ontouchmove="BlockMove(event);">

	<script>
	// From http://matt.might.net/articles/how-to-native-iphone-ipad-apps-in-javascript/
	// See section "Preventing elastic scrolling"
	function BlockMove(event) {
		// Tell Safari not to move the window.
		event.preventDefault() ;
	}
	</script>

	<div data-role="header">
		<h1>DViz Tablet Song App</h1>
	</div><!-- /header -->

	<div data-role="content">
		
		<table border=0 cellspacing=0 cellpadding=0 width='100%' id='page-table' class='twocol'>
			
			<tr><td width='25%' valign=top nowrap id='control-col'>
			 
			 	<ul data-role="controlgroup" data-type="horizontal" class="localnav">
					<li><a href="#" id='modebtn-file' data-role="button" data-transition="fade" class="ui-btn-active">Current Schedule</a></li>
					<li><a href="#" id='modebtn-db'   data-role="button" data-transition="fade">Song Database</a></li>
				</ul>
			
				
				<div data-role="fieldcontain" id='song-search'>
					<!--<label for="search">Search:</label>-->
					<input type="search" name="password" id="search" value="" style='width:100%'/>
				</div>

				<!-- for removing and re-adding the result list -->
				<div id="result-list-box">
					<ul data-role="listview" data-inset="true" id="results-list">
					</ul>
				</div>
			</td>
			<td valign=top>
				<!-- This overflow:auto;width:100% trick clears the floats - see http://www.quirksmode.org/css/clearing.html -->
				<div style='overflow:auto;width:100%'>
					<div style='float:right'>
						<ul data-role="controlgroup" data-type="horizontal" class="localnav" id='font-size'>
							<li><a href="#" id='font-up' data-role="button" data-transition="fade">Text +</a></li>
							<li><a href="#" id='font-dn' data-role="button" data-transition="fade">Text -</a></li>
						</ul>
					</div>
					<div style='float:left'>
						<ul data-role="controlgroup" data-type="horizontal" class="localnav" id='tablet-switcher'>
							<li><a href="#" id='tablet-control' data-role="button" data-transition="fade" class="ui-btn-active">Control Tablet</a></li>
							<li><a href="#" id='tablet-viewer'  data-role="button" data-transition="fade">View-Only Tablet</a></li>
						</ul>
					</div>
				</div>
				
				<div id='song-content' class='content-view ui-corner-all ui-shadow ui-body-c'>
				<!--<div id='song-content' data-role="page" data-theme="c" data-content-theme="c">--> 
					<h3>Song Preview</h3>
					<p>Select an item from the list on the left to view.</p>
					
				</div>
			</td>
		</table>
			

		
	</div><!-- /content -->

</div><!-- /page -->
<script>
$(function()
{
	// Cookies
	function createCookie(name, value, days) {
		if (days == undefined)
			days = 365 * 99;
		if (days) {
			var date = new Date();
			date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
			var expires = "; expires=" + date.toGMTString();
		}
		else var expires = "";
	
		document.cookie = name + "=" + value + expires + "; path=/";
	}

	function readCookie(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}

	function eraseCookie(name) {
		createCookie(name, "", -1);
	}

	$('#tablet-control').on('click', function() { updateTabletMode('control') });
	$('#tablet-viewer') .on('click', function() { updateTabletMode('viewer')  });
	$('#tablet-control').on('touchstart', function(event) { updateTabletMode('control'); return false; });
	$('#tablet-viewer') .on('touchstart', function(event) { updateTabletMode('viewer');  return false; });

	$('#modebtn-db')  .on('click',function() { updateListMode('db')   });
	$('#modebtn-file').on('click',function() { updateListMode('file') });
	$('#modebtn-db')  .on('touchstart',function(event) { updateListMode('db');   return false; });
	$('#modebtn-file').on('touchstart',function(event) { updateListMode('file'); return false; });
	
	$('#font-up').on('click', function() { changeFontSize(1.2); });
	$('#font-dn').on('click', function() { changeFontSize(0.8); });
	$('#font-up').on('touchstart', function() { changeFontSize(1.2); return false; });
	$('#font-dn').on('touchstart', function() { changeFontSize(0.8); return false; });
	
	$('#search').on('keyup',  function() { updateListFilter(this.value, true); }); // true = delay loading
	$('#search').on('change', function() { updateListFilter(this.value); });
	
	
	function changeFontSize(inc)
	{
		var currentFontSize = $('#song-content').css('font-size');
		var currentFontSizeNum = parseFloat(currentFontSize, 10);
		var newFontSize = currentFontSizeNum*inc;
		$('#song-content').css('font-size', newFontSize);
		createCookie('song-content-font-size', newFontSize);
		return false;
	}
	
	var storedFontSize = parseFloat(readCookie('song-content-font-size'));
	$('#song-content').css('font-size', storedFontSize);
	
	// Initalize global state variables (not config values)
	window.TabletMode = 'control';
	window.ListMode = 'file';
	window.ListFilter = '';
	window.LoadingMsgVisible = false;
	window.SearchResults = {};
	window.SlideMappingIdx = 0;
	window.LastLiveSlide = 0; 
	
	function updateTabletMode(modeName)
	{
		window.TabletMode = modeName;
		
		// remove existing classes
		$('#tablet-control').removeClass('ui-btn-active');
		$('#tablet-viewer').removeClass('ui-btn-active');
		
		// Set current mode button active
		if(modeName == 'control')
			$('#tablet-control').addClass('ui-btn-active');
		else
			$('#tablet-viewer').addClass('ui-btn-active');
		
		if(modeName == 'viewer')
		{
			// Start polling for changes
			clearTimeout(window.pollLiveSlide.timerId);
			window.pollLiveSlide.timerId = setInterval(window.pollLiveSlide, 500);
			
			// Set list mode to file
			updateListMode('file');
			
			// Hide list columnn
			$('#control-col').hide();
			
			// adjust formatting
			$('#page-table').removeClass('twocol');
			$('#page-table').addClass('onecol');

			// Hide edit button if present
			$('#edit-item-btn').hide();
		}
		else
		{
			// Leave list mode as whatever, dont worry about polling (it will get stopped when user clicks a song)
			
			// Show list column
			$('#control-col').show();
		
			// adjust formatting
			$('#page-table').removeClass('onecol');
			$('#page-table').addClass('twocol');

			// Show button if needed
			$('#edit-item-btn').show();
		}
	}
	
	function updateListMode(modeName)
	{
		window.ListMode = modeName;
		
		// remove existing classes
		$('#modebtn-db').removeClass('ui-btn-active');
		$('#modebtn-file').removeClass('ui-btn-active');
		
		// Set current mode button active
		if(modeName == 'db')
			$('#modebtn-db').addClass('ui-btn-active');
		else
			$('#modebtn-file').addClass('ui-btn-active');
	
		reloadList();
	}
	
	function updateListFilter(filter, delay)
	{
		window.ListFilter = filter;
		if(!delay)
			reloadList();
		else
		{
			// preemtively show the loading msg even tho we are waiting a bit
			showLoadingMsg();
			
			clearTimeout(updateListFilter.timer);
			updateListFilter.timer = setTimeout(reloadList, 500);
		}
	}
	
	// Regex patterns and logic based on (and roughly equivelant to) the code in SongEditorHighlighter.cpp
	var songTagRegexpList = "Title|Verse|Chorus|Tag|Bridge|End(ing)?|Intro(duction)?";
	var tagPattern  = "^(\\s*(?:" + songTagRegexpList + ")(?:\\s+\\d+)?(?:\\s*\\(.*\\))?\\s*.*)$";
	var rearPattern = "^(\\s*(?:(?:B:|R:|C:|T:|G:|\\[|\\|).*).*)$";
	var tagFormatRegex  = new RegExp(tagPattern, "gi");
	var rearFormatRegex = new RegExp(rearPattern, "gi");
	
	
	window.sendBlockLive = function(itemid, block, touched)
	{
		if(window.TabletMode == 'viewer')
			return;
	
		var idx     = $(block).attr('x:idx');
		var mapping = $(block).attr('x:mapping').split(',');
		if(mapping.length == 1 && mapping[0] == "")
			mapping = [];
		
		// Update UI
		updateLiveSlideUI($(block));
		
		slideGoLive(itemid, idx, mapping, touched);
	}
	
	window.syntaxHighlight = function(text)
	{
		var lines = text.split("\n");
		var linesOut = [];
		for(var i=0; i<lines.length;i++)
		{
			var line = lines[i];
			
			// Make sure we keep the spacing in text so chords line up appropriatly
			line = line.replace(/\s{2}/g,'&nbsp;&nbsp;');
			
			line = line.replace(tagFormatRegex,  "<span class='song-tag-main'>$1</span>");
			line = line.replace(rearFormatRegex, "<span class='song-tag-rear'>$1</span>");

			linesOut[linesOut.length] = line;
		}
		return linesOut.join("<br>\n");
	}
	
	window.showListItem = function(itemid)
	{
		//consoleDebug("showListItem(): ",itemid);
		window.pollLiveSlide.lastLiveSlide = false;
		
		if(window.TabletMode == 'control')
			clearTimeout(window.pollLiveSlide.timerId);
		
		window.CurrentListItemDisplayed = itemid;
		var item = window.SearchResults[itemid];
		if(itemid == undefined || !item)
		{
			$("#song-content").html("<h3>(No song selected)</h3>");
			return;
		}
		
		if(window.ListMode == 'db')
		{
			$("#song-content").html(""
				+"<div class='ui-body ui-body-e' id='preview-notice'>"
					+"<a data-role='button' data-icon='plus' id='add-item-btn' href='javascript:void(addToSchedule("+itemid+"))'>Add to Schedule</a>"
					+"<span id='add-item-msg'>This is a preview from the database - to add it to the current schedule, use the button on the right.</span>"
				+"</div>"
				+"<a data-role='button' data-icon='gear' data-inline='true' id='edit-item-btn' href='javascript:void(editSong("+itemid+"))' style='float:right' data-theme='b'>Edit Song</a>"
				+"<h3>"+item.title+"</h3>"
				+"<code>"+syntaxHighlight(item.text)+"</code>")
				// Trigger jQuery mobile updates
				.trigger( "create" );
		}
		else
		{
			var slideMapping = item.mapping;
			
			// Split the song text into blocks (double newline), wrap the blocks in a <div> decorated with bits of data and enable 'click to go live'
			// functionality on the div, syntax highlight it, then wrap it all back up into a nice HTML block for display
			var blocksOut = [];
			var blocks = item.text.split("\n\n");
			for(var i=0; i<blocks.length; i++)
			{
				var block = syntaxHighlight(blocks[i]);
				
				var mappingList = slideMapping[i];
				if(!mappingList)
					mappingList = [];
					
				var blockOut = "<div class='song-file-block'><div id='slide-idx-"+i+"' x:idx='"+i+"' x:mapping='"+mappingList.join(',')+"' class='song-text-block'>"+block+"</div></div>";
				blocksOut[blocksOut.length] = blockOut;
			}
			
			// Insert the new HTML into the content area
			$("#song-content").html(""
				+ "<a data-role='button' data-icon='gear' data-inline='true' id='edit-item-btn' href='javascript:void(editSong("+itemid+"))' ontouchstart='editSong("+itemid+");return false'"
					+ " style='float:right' data-theme='b'>Edit Song</a>"
				+ "<h3 style='font-size: 120% !important'>" + item.title + "</h3>" 
				+ blocksOut.join("")
			)
			// Trigger jQuery mobile decorations
			.trigger( "create" );
			
			// Add the 'click to go live' handler
			$("#song-content .song-text-block").on('click',      function() { sendBlockLive(itemid, this, false); } );
			
			// 'ontouchstart' added per http://matt.might.net/articles/how-to-native-iphone-ipad-apps-in-javascript/
			// See 'Detecting touch and gesture events' - "...good reason to do this..."
			$("#song-content .song-text-block").on('touchstart', function() { sendBlockLive(itemid, this, true); return false; } );
			
			clearTimeout(window.pollLiveSlide.timerId);
			window.pollLiveSlide.timerId = setInterval(window.pollLiveSlide, 500);
			
		}

		if(window.TabletMode != 'control')
			$('#edit-item-btn').hide();
	}
	
	// consoleDebug(..) calls fail in Google Chrome with "Illegal Invocation" errors - why can't you call window.console.debug via a function reference?
	var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
	if(!is_chrome &&
	   window.console && 
	   window.console.debug)
	   window.consoleDebug = window.console.debug;
	else
	   window.consoleDebug = function() {}
	
	window.showLoadingMsg = function()
	{
		if(!window.LoadingMsgVisible)
		{
			window.LoadingMsgVisible = true;
			$.mobile.showPageLoadingMsg();
		}
	}
	
	window.hideLoadingMsg = function()
	{
		if(window.LoadingMsgVisible)
		{
			window.LoadingMsgVisible = false;
			$.mobile.hidePageLoadingMsg();
		}
	}
	
	window.showConLost = function()
	{
		//console.debug("Connection Lost...");
		if(window.ConLostVisible)
			return;
			
		window.ConLostVisible = true;

		//$.mobile.showPageLoadingMsg("b","Connection Lost, Reconnecting...");
		var elm = $("<div class='ui-body ui-body-a' id='conlost'><center><h3>Connection Lost</h3>Trying to reconnect...</center></div>");
		$(document.body).append(elm);
		window.showConLost.elm = elm;
		
		var win = $(window);
		elm.css('top', win.height() /2 - elm.height()/2 + $(window).scrollTop() );
		elm.css('left', win.width() /2 - elm.width() /2 );
	}
	
	window.hideConLost = function()
	{
		if(window.ConLostVisible)
		{
			window.ConLostVisible = false;
			//$.mobile.hidePageLoadingMsg();
			window.showConLost.elm.hide();
		}
	}
	
	window.updateLiveSlideUI = function(newLiveBlock, dontScroll)
	{
		// No change
		if(window.LastLiveBlock == newLiveBlock)
			return;
		
		// Clear style on last block
		if(window.LastLiveBlock)
			window.LastLiveBlock.removeClass('song-text-block-live');
		
		// Scroll into view
		if(!dontScroll)
		{
			var blockPos = newLiveBlock.offset().top;
			var winHeightHalf = $(window).height() / 2;
			var blockHeight = newLiveBlock.height();
			var scrollPos = blockPos - winHeightHalf + blockHeight;
			$('html, body').animate({scrollTop: scrollPos}, 0);
		}
		
		// Update CSS on new block
		newLiveBlock.addClass('song-text-block-live');
		window.LastLiveBlock = newLiveBlock;
	}
	
	window.slideGoLive = function(itemid, idx, mapList, touched)
	{
		showLoadingMsg();
		
		// Default slide to the idx given so that slides
		// without mappings show as intended
		var slide = idx;
		
		if(mapList && mapList.length > 0)
		{
			// if slideGoLive() called for the same slide with multiple mappings,
			// iterate thru the list of mapped slides and show each in turn
			if(window.LastLiveSlide == idx)
			{
				window.SlideMappingIdx ++;
				if(window.SlideMappingIdx >= mapList.length)
					window.SlideMappingIdx = 0;
			}
			else
				window.SlideMappingIdx = 0;
	
			slide = mapList[window.SlideMappingIdx];
			
			window.LastLiveSlide = idx;
		}
		
		var url = '/tablet/show_slide?group='+itemid+'&slide='+slide+(touched?'&touched=true':'');
		$.ajax({
			type: "GET",
			url: url,
			success: window.hideLoadingMsg
		});
	}
	
	window.addToSchedule = function(itemid)
	{
		showLoadingMsg();
		
		var url = '/tablet/add_song?songid='+itemid;
		$.ajax({
			type: "GET",
			url: url,
			//data: postData,
			success: function(data)
			{
				// Update the 'Add to Schedule' button to say 'View Schedule' and act accordingly
				var addBtn = $("#add-item-btn");
				addBtn.removeClass('ui-btn-up-e');
				addBtn.addClass('ui-btn-up-b');
				$("#add-item-btn .ui-btn-text").html("View Schedule");
				addBtn.on('click', function() {
					updateListMode('file');
					return false;
				});
				
				hideLoadingMsg();
				
				// Change the message text
				$("#add-item-msg").html("Item added! Click the 'View Schedule' button to view the current schedule.");
			}
		});
	}
	
	window.editSong = function(itemid)
	{
		window.editSong.itemid = itemid;
		
		var item = window.SearchResults[itemid];
		if(itemid == undefined || !item)
		{
			$("#song-content").html("<h3>(No song selected)</h3>");
			return;
		}
		
		
		$("#song-content").html(""
			+ "<a data-role='button' data-icon='check' data-inline='true' id='save-edit-btn'   href='javascript:void(saveSongChanges("+itemid+"))' ontouchstart='saveSongChanges("+itemid+");return false'"
				+ " data-theme='b'>Save Changes</a>"
			+ "<a data-role='button'                   data-inline='true' id='cancel-edit-btn' href='javascript:void(cancelEditSong("+itemid+"))'  ontouchstart='cancelEditSong("+itemid+");return false'"
				+ " >Cancel</a>"
			+ "<div data-role='fieldcontain'><label for='song-title-edit'>Title:</label>       <input id='song-title-edit' type='text' value='" + item.title + "' size=30></div>" 
			+ "<div data-role='fieldcontain'><label for='song-arr-edit'>  Arrangement:</label> <input id='song-arr-edit'   type='text' value='" + item.arr + "' size=30></div>"
			+ "<textarea id='song-text-edit' rows=30 cols=30'></textarea>"
		)
		// Trigger jQuery mobile decorations
		.trigger( "create" );

		$('#song-text-edit').attr('value', item.text);
		
		// Initially the edit mode JUST a text editor
		
		// Futre plans:
		// Editor mode with blocks
		// Long press OR copy block to edit block in popup dialog
		// Drag to rearrange blocks
		
	}
	
	window.cancelEditSong = function(itemid)
	{
		showListItem(itemid);
	}
	
	window.saveSongChanges = function(itemid)
	{
		var item = window.SearchResults[itemid];
		if(itemid == undefined || !item)
		{
			$("#song-content").html("<h3>(No song selected)</h3>");
			return;
		}
		
		// Update internal text representation
		item.title = $('#song-title-edit').attr('value');
		item.text  = $('#song-text-edit').attr('value');
		item.arr   = $('#song-arr-edit').attr('value');
		
		// TODO:
		// Make sure we transmit arrangement
		
 		showLoadingMsg();
		
		var postData = 
		{
			title	: item.title,
			text	: item.text,
			arr	: item.arr,
			itemid	: itemid,
			// Server needs ListMode so it can correctly contextualize the itemid into either a SongID or a GroupNum
			mode	: window.ListMode,
		};
		
 		var url = '/tablet/save_song';
		$.ajax({
			type: "POST",
			url: url,
			data: postData,
			success: function(data)
			{
				showListItem(itemid);
				
				hideLoadingMsg();
			}
		});
	}
	
	window.pollLiveSlide = function()
	{
		var url = '/tablet/poll_live_slide';
		$.ajax({
			type: "GET",
			url: url,
			error: function(data)
			{
				//console.debug(url + ":error:",data);
				showConLost();
			},
			success: function(data)
			{
				hideConLost();
				
				if(!data.error)
				{
// 					try
// 					{
						var groupNum = data.groupIdx;
						var slideNum = data.slideIdx;
						
						if(groupNum != window.CurrentListItemDisplayed)
						{
							// We don't change groups on the "control" tablet because
							// we assume the user wants to control the changing of groups
							if(window.TabletMode == 'control')
								return;
							
							// If viewer, assume we're in 'file' list mode and have current list of songs,
							// so we just tell it to show the next live song
							consoleDebug("pollLiveSlide(): group# changed, showing new group:",groupNum);
							showListItem(groupNum);
						}
						
						if(window.pollLiveSlide.lastLiveSlide == slideNum &&
						   window.pollLiveSlide.lastLiveGroup == groupNum)
						{
							//consoleDebug("pollLiveSlide(): No change in slide#/group#");
							return;
						}
						
						window.pollLiveSlide.lastLiveSlide = slideNum;
						window.pollLiveSlide.lastLiveGroup = groupNum;
						
						var item = window.SearchResults[groupNum];
						if(!item)
						{
							consoleDebug("pollLiveSlide(): Group num given does not exist in window.SearchResults, groupNum:", groupNum);
							if(window.TabletMode == 'viewer')
								showListItem(false);
							return;
						}
						
						var slideMapping = item.mapping;
						
						// We have to find slideNum in mappings and map back to non-arranged slide
						// If not found in mappings, use 1-1 mapping
						
						var mappedIdx = -1;
						// slideMapping is a hash, not a straight list, hence the 'var x in y' syntax
						for(var i in slideMapping)
						{
							if(mappedIdx < 0)
							{
								var mappingList = slideMapping[i];
								if(!mappingList)
									mappingList = [];
								
								for(var j=0; j<mappingList.length; j++)
									if(mappingList[j] == slideNum)
										mappedIdx = i;
							}
						}
						
						if(mappedIdx < 0)
							mappedIdx = slideNum;
							
						var $block = $("#slide-idx-" + mappedIdx);
						
						consoleDebug("pollLiveSlide(): Updating live block, mappedIdx:",mappedIdx);
						updateLiveSlideUI($block);
// 					}
// 					catch(e)
// 					{
// 						consoleDebug(e);
// 					}
				}
				else
				{
					if(window.TabletMode == 'viewer')
						showListItem(false);
				}
				
				//clearTimeout(window.pollLiveSlide.timerId);
				//window.pollLiveSlide.timerId = setInterval(window.pollLiveSlide, 2000);
			}
		});
	}
	
	
	function reloadList(pollingFlag, md5)
	{
		if(pollingFlag == undefined)
			pollingFlag = 0;
		if(md5 == undefined)
			md5 = 0;
			
		if(!pollingFlag)
			showLoadingMsg();
		
		// accessCount is used to ignore results received after
		// another request has been sent. For example, if calling reloadList()
		// in response to user keypresses, this is possible:
		// [request1] [request2] [result1] [result2]
		// In this case, it's a waste of time to update the UI with [result1] because
		// [request2] has already been sent, invalidating any info received in [result1],
		// so we just ignore [result1] if the accessCount of the result is less than
		// the accessCount of the most recent request.
		if(!reloadList.accessCount)
			reloadList.accessCount = 0;
		
		reloadList.accessCount ++;
		var thisCount = reloadList.accessCount;
		
		// md5 only relevant if polling - server uses it to check for change
		var url = '/tablet/list?mode='+window.ListMode+'&filter='+window.ListFilter+'&poll='+pollingFlag+'&md5='+md5;
		$.ajax({
			type: "GET",
			url: url,
			error: function(data)
			{
				//console.debug(url + ":error:",data);
				showConLost();
			},
			success: function(data)
			{
				hideConLost();
				
				if(reloadList.accessCount > thisCount)
				{
					// another request was sent while this one was pending - ignore these results and wait for the next set
					return;
				}
				
				//alert("Got post data:"+data+", type:"+typeof(data));
				if(typeof(data) == "string")
				{
					// something wierd on server - should be JSON!
					//errorFunc();
				}
				else
				{
					if(data.nochange)
					{
// 						clearTimeout(reloadList.timerId);
// 						reloadList.timerId = setTimeout(function() { reloadList(true, data.md5); }, 1000);
						return;
					}
						
					// Remove existing list
					$("#results-list").remove();
					$("#result-list-box span.hint").remove();
					
					// Re-create the <UL> list
					var list = $('<ul data-role="listview" data-inset="true" id="results-list"></ul>');
					
					// Clear the results cache
					window.SearchResults = {};
					
					// Create new list elements
					for(var i=0; i<data.list.length; i++)
					{
						var item = data.list[i];
						var shortTitle = item.title.substring(0,20) + (item.title.length > 20 ? "..." :"");
						
						// 'ontouchstart' added per http://matt.might.net/articles/how-to-native-iphone-ipad-apps-in-javascript/
						// See 'Detecting touch and gesture events' - "...good reason to do this..."
						list.append($("<li><a href='javascript:void(showListItem("+item.id+"));' ontouchstart='showListItem("+item.id+");return false'>"+shortTitle+"</a></li>"));
						
						window.SearchResults[item.id] = item;
					}
					
					$("#result-list-box").append(list);
					// Re-apply the jQuery-mobile List Widget behaviours
					list.listview();
					
					// Display hints about the results if needed
					if(data.more)
						$("#result-list-box").append($("<span class=hint>More than "+data.cutoff+" items found...</span>"));
					else	
					if(data.list.length <= 0)
						$("#result-list-box").append($("<span class=hint>" + (window.ListFilter == "" ? "No songs found!" : "No matching songs found.") + "</span>"));
					
					// Update the song preview on the right
					if(window.TabletMode == 'control')
					{
						if(data.list.length == 1)
							showListItem(data.list[0].id);
						else
						if(window.CurrentListItemDisplayed)
							showListItem(window.CurrentListItemDisplayed);
						else
	// 					// NOTE - FOR DEBUGGING
	// 					if(SearchResults[2])
	// 						showListItem(2);
	// 					else
							showListItem(false);
					}
				}	
				
				hideLoadingMsg();
				
// 				// If user switches list 'modes' (from db->file) between reloads,
// 				// multiple reload timers could get started - this just ensures only one reload timer is active.
// 				clearTimeout(reloadList.timerId);
				
				reloadList.latestMd5 = data.md5;
			},
			//error: errorFunc
			
		});
	}

	// Update tablet mode based on url
	if(window.location.search.indexOf("tablet=viewer") > -1)
	{
		updateTabletMode("viewer");
	}
	else
		// Reload if not viewer because updateTabletMode(viewer) reloads list in file mode
		reloadList();
		
	// Setup a timer to poll the server in approx 1sec for changes
	reloadList.timerId = setInterval(function() { reloadList(true, reloadList.latestMd5); }, 1000);

});

</script>
</body>
</html>
