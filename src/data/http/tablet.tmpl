<!DOCTYPE html> 
<html> 
	<head> 
	<title>DViz iPad Song App</title> 
	<meta name="viewport" content="width=device-width, initial-scale=1"> 
	<!--<link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.0/jquery.mobile-1.1.0.min.css" />
	<script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
	<script src="http://code.jquery.com/mobile/1.1.0/jquery.mobile-1.1.0.min.js"></script>-->
	-<link rel="stylesheet" href="/www/jquery.mobile-1.1.0/jquery.mobile-1.1.0.min.css" />
	<script src="/www/jquery-1.7.1.min.js"></script>
	<script src="/www/jquery.mobile-1.1.0/jquery.mobile-1.1.0.min.js"></script>-->
	<style>
	.localnav {
		margin:0 0 0px 0;
		overflow:hidden;
	}
	.localnav li {
		float:left;
	}
	.localnav .ui-btn-inner { 
		padding: .6em 10px; 
		font-size:80%; 
	}
	
	.content-view {
		padding: 10px;
		margin-left: 20px;
	}
	
	#song-search.ui-field-contain .ui-input-search {
		width: 77%;
	}
	
	#result-list-box .hint {
		font-size: .95em;
		color: rgb(100,100,100);
		font-style: italic;
		padding-left: 4em;
	}
	
	#add-item-btn {
		float: left;
		margin-top: 0em;
		margin-right: 1.5em;
		
	}
	
	#preview-notice {
		padding-top: 1em;
	}
	
	#song-content .song-tag-main,
	#song-content .song-tag-rear {
		font-weight: bold;
		background: red;
		color: white;
		text-shadow: none;
		padding-right: .1em;
	}
	
	#song-content .song-tag-rear {
		background: blue;
	}
	
	#song-content .song-text-block-live {
		outline: 3px dotted red;
	}
	
	#song-content .song-text-block {
		font-family: Monospace !important;
	}
	
	
	</style>
</head> 
<body> 

<div data-role="page">

	<div data-role="header">
		<h1>DViz iPad Song App</h1>
	</div><!-- /header -->

	<div data-role="content">
		
		<table border=0 cellspacing=0 cellpadding=0 width='100%'>
			
			<tr><td width='25%' valign=top nowrap>
			 
			 	<ul data-role="controlgroup" data-type="horizontal" class="localnav">
					<li><a href="#" id='modebtn-file' data-role="button" data-transition="fade" class="ui-btn-active">Current Schedule</a></li>
					<li><a href="#" id='modebtn-db'   data-role="button" data-transition="fade">Song Database</a></li>
				</ul>
			
				
				<div data-role="fieldcontain" id='song-search'>
					<!--<label for="search">Search:</label>-->
					<input type="search" name="password" id="search" value="" style='width:100%'/>
				</div>

				<!-- for removing and re-adding the result list -->
				<div id="result-list-box">
					<ul data-role="listview" data-inset="true" id="results-list">
						<!--<li><a href="#" onclick='$.mobile.showPageLoadingMsg();'>Test Item</a></li>-->
					</ul>
				</div>
			</td>
			<td valign=top>
				<div id='song-content' class='content-view ui-corner-all ui-shadow ui-body-c'>
					<h3>Song Preview</h3>
					<p>Select an item from the list on the left to view.</p>
					
				</div>
			</td>
		</table>
			

		
	</div><!-- /content -->

</div><!-- /page -->
<script>
$(function()
{
	$('#modebtn-db')  .on('click',function() { updateListMode('db')   });
	$('#modebtn-file').on('click',function() { updateListMode('file') });
	$('#search').on('keyup',  function() { updateListFilter(this.value, true); });
	$('#search').on('change', function() { updateListFilter(this.value); });
	
	window.ListMode = 'file';
	window.ListFilter = '';
	
	function updateListMode(modeName)
	{
		window.ListMode = modeName;
		
		// remove existing classes
		$('#modebtn-db').removeClass('ui-btn-active');
		$('#modebtn-file').removeClass('ui-btn-active');
		
		// Set current mode button active
		if(modeName == 'db')
			$('#modebtn-db').addClass('ui-btn-active');
		else
			$('#modebtn-file').addClass('ui-btn-active');
	
		reloadList();
	}
	
	function updateListFilter(filter, delay)
	{
		window.ListFilter = filter;
		if(!delay)
			reloadList();
		else
		{
			// preemtively show the loading msg even tho we are waiting a bit
			if(!window.LoadingMsgVisible)
			{
				window.LoadingMsgVisible = true;
				$.mobile.showPageLoadingMsg();
			}
			
			clearTimeout(updateListFilter.timer);
			updateListFilter.timer = setTimeout(reloadList, 500);
		}
	}
	
	// Regex patterns and logic based on (and roughly equivelant to) the code in SongEditorHighlighter.cpp
	var songTagRegexpList = "Title|Verse|Chorus|Tag|Bridge|End(ing)?|Intro(duction)?";
	var tagPattern  = "^(\\s*(?:" + songTagRegexpList + ")(?:\\s+\\d+)?(?:\\s*\\(.*\\))?\\s*.*)$";
	var rearPattern = "^(\\s*(?:(?:B:|R:|C:|T:|G:|\\[|\\|).*).*)$";
	var tagFormatRegex  = new RegExp(tagPattern, "gi");
	var rearFormatRegex = new RegExp(rearPattern, "gi");
	
	window.syntaxHighlight = function(text)
	{
		var lines = text.split("\n");
		var linesOut = [];
		for(var i=0; i<lines.length;i++)
		{
			var line = lines[i];
			line = line.replace(tagFormatRegex,  "<span class='song-tag-main'>$1</span>");
			line = line.replace(rearFormatRegex, "<span class='song-tag-rear'>$1</span>");

			linesOut[linesOut.length] = line;
		}
		return linesOut.join("<br>\n");
	}
	
	window.showListItem = function(itemid)
	{
		window.CurrentListItemDisplayed = itemid;
		var item = window.SearchResults[itemid];
		if(!itemid || !item)
		{
			$("#song-content").html("<h3>(No song selected)</h3>");
			return;
		}
		
		if(window.ListMode == 'db')
		{
			$("#song-content").html(""
				+"<div class='ui-body ui-body-e' id='preview-notice'>"
					+"<a data-role='button' data-icon='star' id='add-item-btn' href='javascript:void(addToSchedule("+itemid+"))'>Add to Schedule</a>"
					+"<span id='add-item-msg'>This is a preview from the database - to add it to the current schedule, use the button on the right.</span>"
				+"</div>"
				+"<h3>"+item.title+"</h3>"
				+"<code>"+syntaxHighlight(item.text)+"</code>");
				
			$('#add-item-btn').button();
		}
		else
		{
			var slideMapping = item.mapping;
			
			// Split the song text into blocks (double newline), wrap the blocks in a <div> decorated with bits of data and enable 'click to go live'
			// functionality on the div, syntax highlight it, then wrap it all back up into a nice HTML block for display
			var blocksOut = [];
			var blocks = item.text.split("\n\n");
			for(var i=0; i<blocks.length; i++)
			{
				var block = syntaxHighlight(blocks[i]);
				
				var mappingList = slideMapping[i];
				if(!mappingList)
					mappingList = [];
					
				var blockOut = "<div x:idx='"+i+"' x:mapping='"+mappingList.join(',')+"' class='song-text-block'>"+block+"</div>";
				blocksOut[blocksOut.length] = blockOut;
			}
			
			// Insert the new HTML into the content area
			$("#song-content").html("<h3>" + item.title + "</h3>" + blocksOut.join("<br>"));
			
			// Add the 'click to go live' handler
			$("#song-content .song-text-block").on('click', function()
			{
				var idx     = $(this).attr('x:idx');
				var mapping = $(this).attr('x:mapping').split(',');
				if(mapping.length == 1 && mapping[0] == "")
					mapping = [];
				
				// Update UI
				if(window.LastLiveBlock)
					window.LastLiveBlock.removeClass('song-text-block-live');
				$(this).addClass('song-text-block-live');
				window.LastLiveBlock = $(this);
				
				slideGoLive(itemid, idx, mapping);
			});
			
		}
	}
	
	window.slideGoLive = function(itemid, idx, mapList)
	{
		if(!window.LoadingMsgVisible)
		{
			window.LoadingMsgVisible = true;
			$.mobile.showPageLoadingMsg();
		}
		
		var slide = idx;
		
		if(mapList && mapList.length > 0)
		{
			if(window.LastLiveSlide == idx)
			{
				window.SlideMappingIdx ++;
				if(window.SlideMappingIdx >= mapList.length)
					window.SlideMappingIdx = 0;
			}
			else
				window.SlideMappingIdx = 0;
	
			slide = mapList[window.SlideMappingIdx];
			
			window.LastLiveSlide = idx;
		}
		
		var url = '/show_slide?group='+itemid+'&slide='+slide;
		$.ajax({
			type: "GET",
			url: url,
			success: function(data)
			{
				window.LoadingMsgVisible = false;
				$.mobile.hidePageLoadingMsg();
			}
		});
	}
	
	window.addToSchedule = function(itemid)
	{
		if(!window.LoadingMsgVisible)
		{
			window.LoadingMsgVisible = true;
			$.mobile.showPageLoadingMsg();
		}
		
		var url = '/add_song?songid='+itemid;
		$.ajax({
			type: "GET",
			url: url,
			//data: postData,
			success: function(data)
			{
				// Update the 'Add to Schedule' button to say 'View Schedule' and act accordingly
				var addBtn = $("#add-item-btn");
				addBtn.removeClass('ui-btn-up-e');
				addBtn.addClass('ui-btn-up-b');
				$("#add-item-btn .ui-btn-text").html("View Schedule");
				addBtn.on('click', function() {
					updateListMode('file');
					return false;
				});
				
				window.LoadingMsgVisible = false;
				$.mobile.hidePageLoadingMsg();
				
				// Change the message text
				$("#add-item-msg").html("Item added! Click the 'View Schedule' button to view the current schedule.");
			}
		});
	}
	
	function reloadList(pollingFlag, md5)
	{
		if(pollingFlag == undefined)
			pollingFlag = 0;
		if(md5 == undefined)
			md5 = 0;
			
		if(!pollingFlag && !window.LoadingMsgVisible)
		{
			window.LoadingMsgVisible = true;
			$.mobile.showPageLoadingMsg();
		}
		
		
		// accessCount is used to ignore results received after
		// another request has been sent. For example, if calling reloadList()
		// in response to user keypresses, this is possible:
		// [request1] [request2] [result1] [result2]
		// In this case, it's a waste of time to update the UI with [result1] because
		// [request2] has already been sent, invalidating any info received in [result1],
		// so we just ignore [result1] if the accessCount of the result is less than
		// the accessCount of the most recent request.
		if(!reloadList.accessCount)
			reloadList.accessCount = 0;
		
		reloadList.accessCount ++;
		var thisCount = reloadList.accessCount;
		
		// md5 only relevant if polling - server uses it to check for change
		var url = '/list?mode='+window.ListMode+'&filter='+window.ListFilter+'&poll='+pollingFlag+'&md5='+md5;
		$.ajax({
			type: "GET",
			url: url,
			//data: postData,
			success: function(data)
			{
				if(reloadList.accessCount > thisCount)
				{
					// another request was sent while this one was pending - ignore these results and wait for the next set
					return;
				}
				
				//alert("Got post data:"+data+", type:"+typeof(data));
				if(typeof(data) == "string")
				{
					// something wierd on server - should be JSON!
					//errorFunc();
				}
				else
				{
					if(data.nochange)
					{
						clearTimeout(reloadList.timerId);
						reloadList.timerId = setTimeout(function() { reloadList(true, data.md5); }, 1000);
						return;
					}
						
					// Remove existing list
					$("#results-list").remove();
					$("#result-list-box span.hint").remove();
					
					// Re-create the <UL> list
					var list = $('<ul data-role="listview" data-inset="true" id="results-list"></ul>');
					
					// Clear the results cache
					window.SearchResults = {};
					
					// Create new list elements
					for(var i=0; i<data.list.length; i++)
					{
						var item = data.list[i];
						var shortTitle = item.title.substring(0,20) + (item.title.length > 20 ? "..." :"");
						
						list.append($("<li><a href='javascript:void(showListItem("+item.id+"));'>"+shortTitle+"</a></li>"));
						
						window.SearchResults[item.id] = item;
					}
					
					$("#result-list-box").append(list);
					// Re-apply the jQuery-mobile List Widget behaviours
					list.listview();
					
					// Display hints about the results if needed
					if(data.more)
						$("#result-list-box").append($("<span class=hint>More than "+data.cutoff+" items found...</span>"));
					else	
					if(data.list.length <= 0)
						$("#result-list-box").append($("<span class=hint>" + (window.ListFilter == "" ? "No songs found!" : "No matching songs found.") + "</span>"));
					
					// Update the song preview on the right
					if(data.list.length == 1)
						showListItem(data.list[0].id);
					else
					if(window.CurrentListItemDisplayed)
						showListItem(window.CurrentListItemDisplayed);
					else
// 					// NOTE - FOR DEBUGGING
// 					if(SearchResults[2])
// 						showListItem(2);
// 					else
						showListItem(false);
				}	
				
				window.LoadingMsgVisible = false;
				$.mobile.hidePageLoadingMsg();
				
				// If user switches list 'modes' (from db->file) between reloads,
				// multiple reload timers could get started - this just ensures only one reload timer is active.
				clearTimeout(reloadList.timerId);
				
				// Setup a timer to poll the server in approx 1sec for changes
				//reloadList.timerId = setTimeout(function() { reloadList(true, data.md5); }, 1000);
			},
			//error: errorFunc
			
		});
	}

	reloadList();
});

</script>
</body>
</html>
