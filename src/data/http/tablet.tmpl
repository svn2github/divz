<!DOCTYPE html> 
<!--<html manifest="/www/tablet/cache.manifest">--> 
<html>
	<head>
	<title>DViz Tablet Song App</title> 
	
	<!--<meta name="viewport" content="width=device-width, initial-scale=1">-->
	<meta name="viewport" content="width=device-width, user-scalable=no" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="default" /> <!--The values for content are default, black and black-translucent-->
	<link rel="apple-touch-icon" href="/www/tablet/apple-touch-icon.png" /> <!-- If you don't want the glossy finish applied automatically, use apple-touch-icon-precomposed instead of apple-touch-icon. -->
		<!--114x114 .png file - On older iPhones, which used 56x56 icons, and the iPad, which uses 72x72 icons, the graphic automatically scales down.--> 
	<link rel="apple-touch-startup-image" href="/www/tablet/startup.png" />
		<!--The file must be exactly 320x460, or else the iPhone ignores it. (The iPad requires 1004x768.)--> 
	
	<!--<link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.0/jquery.mobile-1.1.0.min.css" />
	<script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
	<script src="http://code.jquery.com/mobile/1.1.0/jquery.mobile-1.1.0.min.js"></script>-->
	
	<link rel="stylesheet" href="/www/jquery.ui-1.8.21/css/smoothness/jquery-ui-1.8.21.custom.css"/>
	<link rel="stylesheet" href="/www/jquery.mobile-1.1.0/jquery.mobile-1.1.0.min.css" />
	<script src="/www/jquery-1.7.1.min.js"></script>
	<script src='/www/jquery.ui-1.8.21/js/jquery-ui-1.8.21.custom.min.js'></script>
	<script src="/www/jquery.ui.touch-punch.min.js"></script> <!-- augments touch events to be compatible with jquery-ui -->
	<script src="/www/jquery.mobile-1.1.0/jquery.mobile-1.1.0.min.js"></script>
		
	<style>
	
	/* set ui-page z-index for compat with jQuery dialogs */
	.ui-page {
	}
	
	.localnav {
		margin:0 0 0px 0;
		overflow:hidden;
	}
	.localnav li {
		float:left;
	}
	.localnav .ui-btn-inner { 
		padding: .6em 10px; 
		font-size:80%; 
	}
	
	.content-view {
		padding: 10px;
		margin-left: 20px;
	}
	#tablet-switcher {
		margin-left: 20px;
		margin-bottom: 15px;
	}
	
	#song-search.ui-field-contain .ui-input-search {
		width: 77%;
	}
	
	#result-list-box .hint {
		font-size: .95em;
		color: rgb(100,100,100);
		font-style: italic;
		padding-left: 2em;
	}
	
	#add-item-btn {
		float: left;
		margin-top: 0em;
		margin-right: 1.5em;
		
	}
	
	#preview-notice {
		padding-top: 1em;
	}
	
	#song-content {
		font-size: 1.2em;
	}
	
	.song-tag-main,
	.song-tag-rear {
		font-weight: bold;
		background: red;
		color: white;
		text-shadow: none;
		padding-right: .1em;
	}
	
	.song-tag-rear {
		background: blue;
	}
	
	#song-content .song-text-block-live {
		outline: 3px dotted red;
	}
	
	#song-content .song-text-block {
		font-family: Monospace !important;
	}
	
	/* Style the padding between blocks as an outer block so when we call scrollIntoView() we can have some padding while still retaining the outline tight around the block */
	#song-content .song-file-block {
		padding-bottom: 2em;
	}
	
	#page-table.onecol .content-view,
	#page-table.onecol #tablet-switcher { 
		margin-left: 0px;
	}
	
	#conlost {
		z-index: 999;
		width:20em;
		padding: .5em 2em 2em 2em;
	}
	
	#edit-page {
		/* -1 so its above .ui-page (-999) but below jQuery dialogs */
		z-index: 100;
		position: absolute;
		width: 100%;
		height:100%;
		top: 0;
		left: 0;
		margin-top:-2px;
	}
	
	.outer-block {
		cursor: move;
		float: left;
		list-style: none outside none;
		
	}
	
	.inner-block {
		border: 1px solid black;
		border-top: 0;
		color: black;
		
		font-size: 0.75em;
		/*font-weight: bold;*/
		
		margin: 0.5em;
		text-shadow: 0 0 3px #FFFFFF;
		/*width: 6em;*/
		font-family: Monospace !important;
		height: 15em;
		max-width: 15em;
		float: left;
		
		background: white;
		
		white-space: normal;
	}
	
	.block-button {
		text-align: left;
		font-family: Monospace !important;
		height: 15em;
		float: left;
		font-size: 0.70em;
		max-width: 15em;	
	}
	
	.inner-block textarea {
		width: 100%;
		height: 100%;
		font-family: Monospace !important;
		font-size: 1em;
		border: 0;
	}
	
	.outer-block .inner-block .title {
		/*margin: -0.25em;*/
		/*margin-top: -.75em;*/
		margin-bottom: 0.25em;
		padding-left: .25em;
		font-weight: bold;
	}
	
	.outer-block .block-button .title {
		text-shadow: none;
		padding-left: .25em;
		margin-bottom: 0.25em;
		font-weight: bold;
		font-family: Sans-Serif !important;
		font-size: 1em;
	}
	
	.outer-block .inner-block .text {
		padding: 0.25em;
		/*text-align: center;*/
	}
	
	
	.outer-block.block-type-chorus .inner-block {
		border-top: 4px solid lime;
	}
	
	.outer-block.block-type-chorus .block-button .title,
	.outer-block.block-type-chorus .inner-block .title {
		background: lime;
		/*color: white;*/
	}
	
	
	.outer-block.block-type-verse .inner-block {
		border-top: 4px solid darkorange;
	}
	
	.outer-block.block-type-verse .block-button .title,
	.outer-block.block-type-verse .inner-block .title {
		background: darkorange;
		/*color: white;*/
	}
	
	.outer-block.block-type-bridge .inner-block {
		border-top: 4px solid yellow;
	}
	
	.outer-block.block-type-bridge .block-button .title,
	.outer-block.block-type-bridge .inner-block .title {
		background: yellow;
	}
	
	.outer-block.block-type-tag .inner-block {
		border-top: 4px solid red;
	}
	
	.outer-block.block-type-tag .block-button .title,
	.outer-block.block-type-tag .inner-block .title {
		background: red;
	}
	
	.outer-block.block-type-title .block-button .title {
		background: salmon;
	}
	
	#editblock-text {
		z-index: 999;
		width:80%;
		padding: .5em 2em 2em 2em;
	}
	
	#song-block-text-edit {
		width: 100%;
		min-height: 15em;
		font-family: Monospace !important;
	}
	
		
		
	.textarea-highlight-wrap {
		position: relative;
	}
	.textarea-highlight-display {
		position: absolute;
		top: 2px;
		left: 2px;
		z-index: 1; /* display behind <textarea> */
			
		/* just for testing */
	/* 	 background: green; */
		
		line-height: 1.4;
		padding:0.4em;
		
		color: transparent;
	}
	
	.textarea-highlight-wrap textarea {
		background: transparent;
		position: absolute;
		top: 0;
		left: 0;
		z-index: 3; /* display above highlights */
		/*color: black;*/
	}
	
	.textarea-highlight-display,
	.textarea-highlight-wrap textarea {
		font-family: Monospace;
		/*font-size: 12px;*/ /* todo sync font via jquery */
	}
	
	/* Override all text colors in highlight area */
	.textarea-highlight-display * {
		color: transparent; 
	}
	
	/* Override ui-btn-down-c and ui-btn-hover-c for song block draging
	   because sometimes on tablets jQuery doesn't register "touch up" events
	   and the btn stays "stuck" on the down or hover styles */

	#edit-box .ui-btn-down-c,
	#edit-box .ui-btn-hover-c {
		/*just a copy of .ui-btn-up-c*/
		border: 1px solid 		#ccc /*{c-bup-border}*/;
		background: 			#eee /*{c-bup-background-color}*/;
		font-weight: bold;
		color: 					#222 /*{c-bup-color}*/;
		text-shadow: 0 /*{c-bup-shadow-x}*/ 1px /*{c-bup-shadow-y}*/ 0 /*{c-bup-shadow-radius}*/ #ffffff /*{c-bup-shadow-color}*/;
		background-image: -webkit-gradient(linear, left top, left bottom, from( #ffffff /*{c-bup-background-start}*/), to( #f1f1f1 /*{c-bup-background-end}*/)); /* Saf4+, Chrome */
		background-image: -webkit-linear-gradient( #ffffff /*{c-bup-background-start}*/, #f1f1f1 /*{c-bup-background-end}*/); /* Chrome 10+, Saf5.1+ */
		background-image:    -moz-linear-gradient( #ffffff /*{c-bup-background-start}*/, #f1f1f1 /*{c-bup-background-end}*/); /* FF3.6 */
		background-image:     -ms-linear-gradient( #ffffff /*{c-bup-background-start}*/, #f1f1f1 /*{c-bup-background-end}*/); /* IE10 */
		background-image:      -o-linear-gradient( #ffffff /*{c-bup-background-start}*/, #f1f1f1 /*{c-bup-background-end}*/); /* Opera 11.10+ */
		background-image:         linear-gradient( #ffffff /*{c-bup-background-start}*/, #f1f1f1 /*{c-bup-background-end}*/);
	}
	#edit-box .ui-btn-down-c  a.ui-link-inherit,
	#edit-box .ui-btn-hover-c a.ui-link-inherit {
		/*just a copy of .ui-btn-up-c a.ui-link-inherit*/
		color: 					#2F3E46 /*{c-bup-color}*/;
	}

	
	</style>
</head> 
<body>

<div data-role="page" >

	
	<script>
// 	ontouchmove="BlockMove(event);"
// 	// From http://matt.might.net/articles/how-to-native-iphone-ipad-apps-in-javascript/
// 	// See section "Preventing elastic scrolling"
// 	function BlockMove(event) {
// 		// Tell Safari not to move the window.
// 		event.preventDefault() ;
// 	}
	</script>

	<div data-role="header">
		<h1>DViz Tablet Song App</h1>
	</div><!-- /header -->

	<div data-role="content">
		
		<table border=0 cellspacing=0 cellpadding=0 width='100%' id='page-table' class='twocol'>
			
			<tr><td width='25%' valign=top nowrap id='control-col'>
			 
			 	<ul data-role="controlgroup" data-type="horizontal" class="localnav">
					<li><a href="#" id='modebtn-file' data-role="button" data-transition="fade" class="ui-btn-active">Current Schedule</a></li>
					<li><a href="#" id='modebtn-db'   data-role="button" data-transition="fade">Song Database</a></li>
				</ul>
			
				
				<div data-role="fieldcontain" id='song-search'>
					<!--<label for="search">Search:</label>-->
					<input type="search" name="password" id="search" value="" style='width:100%'/>
				</div>

				<!-- for removing and re-adding the result list -->
				<div id="result-list-box">
					<ul data-role="listview" data-inset="true" id="results-list">
					</ul>
				</div>
			</td>
			<td valign=top>
				<!-- This overflow:auto;width:100% trick clears the floats - see http://www.quirksmode.org/css/clearing.html -->
				<div style='overflow:auto;width:100%'>
					<div style='float:left'>
						<ul data-role="controlgroup" data-type="horizontal" class="localnav" id='tablet-switcher'>
							<li><a href="#" id='tablet-control' data-role="button" data-transition="fade" class="ui-btn-active">Control Tablet</a></li>
							<li><a href="#" id='tablet-viewer'  data-role="button" data-transition="fade">Viewer Tablet</a></li>
						</ul>
					</div>
					
					<div style='float:left;margin-left: 1em'>
						<ul data-role="controlgroup" data-type="horizontal" class="localnav" id='font-size'>
							<li><a href="#" id='font-up' data-role="button" data-transition="fade">Text +</a></li>
							<li><a href="#" id='font-dn' data-role="button" data-transition="fade">Text -</a></li>
						</ul>
					</div>
					
				</div>
				
				<div id='song-content' class='content-view ui-corner-all ui-shadow ui-body-c'>
				<!--<div id='song-content' data-role="page" data-theme="c" data-content-theme="c">--> 
					<h3>Song Preview</h3>
					<p>Select an item from the list on the left to view.</p>
					
				</div>
			</td>
		</table>
			

		
	</div><!-- /content -->

</div><!-- /page -->
<script>
$(function()
{
	window.DEBUG_DISABLE_POLLING = false;
	 
	$("#debug-reload").attr('href','/?date='+(new Date()).getTime());
	// Cookies
	function createCookie(name, value, days) {
		if (days == undefined)
			days = 365 * 99;
		if (days) {
			var date = new Date();
			date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
			var expires = "; expires=" + date.toGMTString();
		}
		else var expires = "";
	
		document.cookie = name + "=" + value + expires + "; path=/";
	}

	function readCookie(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}

	function eraseCookie(name) {
		createCookie(name, "", -1);
	}

	$('#tablet-control').on('click', function() { updateTabletMode('control') });
	$('#tablet-viewer') .on('click', function() { updateTabletMode('viewer')  });
	$('#tablet-control').on('touchstart', function(event) { updateTabletMode('control'); return false; });
	$('#tablet-viewer') .on('touchstart', function(event) { updateTabletMode('viewer');  return false; });

	$('#modebtn-db')  .on('click',function() { updateListMode('db')   });
	$('#modebtn-file').on('click',function() { updateListMode('file') });
	$('#modebtn-db')  .on('touchstart',function(event) { updateListMode('db');   return false; });
	$('#modebtn-file').on('touchstart',function(event) { updateListMode('file'); return false; });
	
	$('#font-up').on('click', function() { changeFontSize(1.2); });
	$('#font-dn').on('click', function() { changeFontSize(0.8); });
	$('#font-up').on('touchstart', function() { changeFontSize(1.2); return false; });
	$('#font-dn').on('touchstart', function() { changeFontSize(0.8); return false; });
	
	$('#search').on('keyup',  function() { updateListFilter(this.value, true); }); // true = delay loading
	$('#search').on('change', function() { updateListFilter(this.value); });
	
	
	function changeFontSize(inc)
	{
		var currentFontSize = $('.song-text-wrapper').css('font-size');
		var currentFontSizeNum = parseFloat(currentFontSize, 10);
		var newFontSize = currentFontSizeNum*inc;
		$('.song-text-wrapper').css('font-size', newFontSize);
		createCookie('song-content-font-size', newFontSize);
		return false;
	}
	
	var storedFontSize = parseFloat(readCookie('song-content-font-size'));
	$('#song-content').css('font-size', storedFontSize);
	
	// Initalize global state variables (not config values)
	window.TabletMode = 'control';
	window.ListMode = 'file';
	window.ListFilter = '';
	window.LoadingMsgVisible = false;
	window.SearchResults = {};
	window.SlideMappingIdx = 0;
	window.LastLiveSlide = 0; 
	
	function updateTabletMode(modeName)
	{
		window.TabletMode = modeName;
		
		// remove existing classes
		$('#tablet-control').removeClass('ui-btn-active');
		$('#tablet-viewer').removeClass('ui-btn-active');
		
		// Set current mode button active
		if(modeName == 'control')
			$('#tablet-control').addClass('ui-btn-active');
		else
			$('#tablet-viewer').addClass('ui-btn-active');
		
		if(modeName == 'viewer')
		{
			// Start polling for changes
			clearTimeout(window.pollLiveSlide.timerId);
			if(!DEBUG_DISABLE_POLLING)
				window.pollLiveSlide.timerId = setInterval(window.pollLiveSlide, 500);
			
			// Set list mode to file
			updateListMode('file');
			
			// Hide list columnn
			$('#control-col').hide();
			
			// adjust formatting
			$('#page-table').removeClass('twocol');
			$('#page-table').addClass('onecol');

			// Hide edit button if present
			$('#edit-item-btn').hide();
		}
		else
		{
			// Leave list mode as whatever, dont worry about polling (it will get stopped when user clicks a song)
			
			// Show list column
			$('#control-col').show();
		
			// adjust formatting
			$('#page-table').removeClass('onecol');
			$('#page-table').addClass('twocol');

			// Show button if needed
			$('#edit-item-btn').show();
		}
	}
	
	function updateListMode(modeName)
	{
		window.ListMode = modeName;
		
		// remove existing classes
		$('#modebtn-db').removeClass('ui-btn-active');
		$('#modebtn-file').removeClass('ui-btn-active');
		
		// Set current mode button active
		if(modeName == 'db')
			$('#modebtn-db').addClass('ui-btn-active');
		else
			$('#modebtn-file').addClass('ui-btn-active');
	
		reloadList();
	}
	
	function updateListFilter(filter, delay)
	{
		window.ListFilter = filter;
		if(!delay)
			reloadList();
		else
		{
			// preemtively show the loading msg even tho we are waiting a bit
			showLoadingMsg();
			
			clearTimeout(updateListFilter.timer);
			updateListFilter.timer = setTimeout(reloadList, 500);
		}
	}
	
	window.sendBlockLive = function(itemid, block, touched)
	{
		//if(window.TabletMode == 'viewer')
		//	return;
	
		var idx     = $(block).attr('x:idx');
		var mapping = $(block).attr('x:mapping').split(',');
		if(mapping.length == 1 && mapping[0] == "")
			mapping = [];
		
		// Update UI
		updateLiveSlideUI($(block));
		
		slideGoLive(itemid, idx, mapping, touched);
	}
	
	// Regex patterns and syntaxHighlight() logic based on (and roughly equivelant to) the code in SongEditorHighlighter.cpp
	var songTagRegexpList = "Title|Verse|Chorus|Tag|Bridge|End(ing)?|Intro(duction)?";
	var tagPattern  = "^(\\s*(?:" + songTagRegexpList + ")(?:\\s+\\d+)?(?:\\s*\\(.*\\))?\\s*.*)$";
	var rearPattern = "^(\\s*(?:(?:B:|R:|C:|T:|G:|\\[|\\|).*).*)$";
	var tagFormatRegex  = new RegExp(tagPattern, "gi");
	var rearFormatRegex = new RegExp(rearPattern, "gi");
	
	window.syntaxHighlight = function(text)
	{
		var lines = text.split("\n");
		var linesOut = [];
		for(var i=0; i<lines.length;i++)
		{
			var line = lines[i];
			
			// Make sure we keep the spacing in text so chords line up appropriatly
			line = line.replace(/\s{2}/g,'&nbsp;&nbsp;');
			
			line = line.replace(tagFormatRegex,  "<span class='song-tag-main'>$1</span>");
			line = line.replace(rearFormatRegex, "<span class='song-tag-rear'>$1</span>");

			linesOut[linesOut.length] = line;
		}
		return linesOut.join("<br>\n");
	}
	
	window.showListItem = function(itemid)
	{
		//consoleDebug("showListItem(): ",itemid);
		window.pollLiveSlide.lastLiveSlide = false;
		
		if(window.TabletMode == 'control')
			clearTimeout(window.pollLiveSlide.timerId);
		
		window.CurrentListItemDisplayed = itemid;
		var item = window.SearchResults[itemid];
		if(itemid == undefined || !item)
		{
			$("#song-content").html("<h3>(No song selected)</h3>");
			return;
		}
		
		if(window.ListMode == 'db')
		{
			$("#song-content").html(""
				+ "<div class='ui-body ui-body-e' id='preview-notice'>"
					+"<a data-role='button' data-icon='plus' id='add-item-btn' href='javascript:void(addToSchedule("+itemid+"))'>Add to Schedule</a>"
					+"<span id='add-item-msg'>This is a preview from the database - to add it to the current schedule, use the button on the right.</span>"
				+ "</div>"
				+ "<a data-role='button' data-icon='gear' data-inline='true' id='edit-item-btn' href='javascript:void(editSong("+itemid+"))' style='float:right' data-theme='b'>Edit Song</a>"
				+ "<h3>"+item.title+"</h3>"
				+ "<div class='song-text-wrapper'><code>"+syntaxHighlight(item.text)+"</code></div>")
				// Trigger jQuery mobile updates
				.trigger( "create" );
		}
		else
		{
			var slideMapping = item.mapping;
			
			// Split the song text into blocks (double newline), wrap the blocks in a <div> decorated with bits of data and enable 'click to go live'
			// functionality on the div, syntax highlight it, then wrap it all back up into a nice HTML block for display
			var blocksOut = [];
			var blocks = item.text.split("\n\n");
			for(var i=0; i<blocks.length; i++)
			{
				var block = syntaxHighlight(blocks[i]);
				
				var mappingList = slideMapping[i];
				if(!mappingList)
					mappingList = [];
					
				var blockOut = "<div class='song-file-block'><div id='slide-idx-"+i+"' x:idx='"+i+"' x:mapping='"+mappingList.join(',')+"' class='song-text-block'>"+block+"</div></div>";
				blocksOut[blocksOut.length] = blockOut;
			}
			
			// Insert the new HTML into the content area
			$("#song-content").html(""
				+ "<a data-role='button' data-icon='gear' data-inline='true' id='edit-item-btn' href='javascript:void(editSong("+itemid+"))' ontouchstart='editSong("+itemid+");return false'"
					+ " style='float:right' data-theme='b'>Edit Song</a>"
				+ "<h3>" + item.title + "</h3>" 
				+ "<div class='song-text-wrapper'>"
					+ blocksOut.join("")
				+ "</div>"
			)
			// Trigger jQuery mobile decorations
			.trigger( "create" );
			
			// Add the 'click to go live' handler
			$("#song-content .song-text-block").on('click',      function() { sendBlockLive(itemid, this, false); } );
			
			// 'ontouchstart' added per http://matt.might.net/articles/how-to-native-iphone-ipad-apps-in-javascript/
			// See 'Detecting touch and gesture events' - "...good reason to do this..."
			$("#song-content .song-text-block").on('touchstart', function() { sendBlockLive(itemid, this, true); return false; } );
			
			clearTimeout(window.pollLiveSlide.timerId);
			if(!DEBUG_DISABLE_POLLING)
				window.pollLiveSlide.timerId = setInterval(window.pollLiveSlide, 500);
			
		}

		if(window.TabletMode != 'control')
			$('#edit-item-btn').hide();
	}
	
	// consoleDebug(..) calls fail in Google Chrome with "Illegal Invocation" errors - why can't you call window.console.debug via a function reference?
// 	var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
// 	var is_safari = navigator.userAgent.toLowerCase().indexOf('safari') > -1;
// 	if(!is_chrome &&
// 	   !is_safari &&
// 	   window.console && 
// 	   window.console.debug)
// 	   window.consoleDebug = window.console.debug;
// 	else
	   window.consoleDebug = function() {}
	
	window.showLoadingMsg = function()
	{
		if(!window.LoadingMsgVisible)
		{
			window.LoadingMsgVisible = true;
			$.mobile.showPageLoadingMsg();
		}
	}
	
	window.hideLoadingMsg = function()
	{
		if(window.LoadingMsgVisible)
		{
			window.LoadingMsgVisible = false;
			$.mobile.hidePageLoadingMsg();
		}
	}
	
	window.showConLost = function()
	{
		//console.debug("Connection Lost...");
		if(window.ConLostVisible)
			return;
			
		window.ConLostVisible = true;

		//$.mobile.showPageLoadingMsg("b","Connection Lost, Reconnecting...");
		var elm = $("<div class='ui-body ui-body-a' id='conlost'><center><h3>Connection Lost</h3>Trying to reconnect...</center></div>");
		$(document.body).append(elm);
		window.showConLost.elm = elm;
		
		var win = $(window);
		elm.css('top', win.height() /2 - elm.height()/2 + $(window).scrollTop() );
		elm.css('left', win.width() /2 - elm.width() /2 );
	}
	
	window.hideConLost = function()
	{
		if(window.ConLostVisible)
		{
			window.ConLostVisible = false;
			//$.mobile.hidePageLoadingMsg();
			window.showConLost.elm.remove();
		}
	}
	
	window.updateLiveSlideUI = function(newLiveBlock, dontScroll)
	{
		// No change
		if(window.LastLiveBlock == newLiveBlock)
			return;
		
		// Clear style on last block
		if(window.LastLiveBlock)
			window.LastLiveBlock.removeClass('song-text-block-live');
		
		// Scroll into view
		if(!dontScroll &&
		   newLiveBlock.offset())
		{
			var blockPos = newLiveBlock.offset().top;
			var winHeightHalf = $(window).height() / 2;
			var blockHeight = newLiveBlock.height();
			var scrollPos = blockPos - winHeightHalf + blockHeight;
			$('html, body').animate({scrollTop: scrollPos}, 1000);
		}
		
		// Update CSS on new block
		newLiveBlock.addClass('song-text-block-live');
		window.LastLiveBlock = newLiveBlock;
	}
	
	window.slideGoLive = function(itemid, idx, mapList, touched)
	{
		showLoadingMsg();
		
		// Default slide to the idx given so that slides
		// without mappings show as intended
		var slide = idx;
		
		if(mapList && mapList.length > 0)
		{
			// if slideGoLive() called for the same slide with multiple mappings,
			// iterate thru the list of mapped slides and show each in turn
			if(window.LastLiveSlide == idx)
			{
				window.SlideMappingIdx ++;
				if(window.SlideMappingIdx >= mapList.length)
					window.SlideMappingIdx = 0;
			}
			else
				window.SlideMappingIdx = 0;
	
			slide = mapList[window.SlideMappingIdx];
			
			window.LastLiveSlide = idx;
		}
		
		var url = '/tablet/show_slide?group='+itemid+'&slide='+slide+(touched?'&touched=true':'');
		$.ajax({
			type: "GET",
			url: url,
			success: window.hideLoadingMsg
		});
	}
	
	window.addToSchedule = function(itemid)
	{
		showLoadingMsg();
		
		var url = '/tablet/add_song?songid='+itemid;
		$.ajax({
			type: "GET",
			url: url,
			//data: postData,
			success: function(data)
			{
				// Update the 'Add to Schedule' button to say 'View Schedule' and act accordingly
				var addBtn = $("#add-item-btn");
				addBtn.removeClass('ui-btn-up-e');
				addBtn.addClass('ui-btn-up-b');
				$("#add-item-btn .ui-btn-text").html("View Schedule");
				addBtn.on('click', function() {
					updateListMode('file');
					return false;
				});
				
				hideLoadingMsg();
				
				// Change the message text
				$("#add-item-msg").html("Item added! Click the 'View Schedule' button to view the current schedule.");
			}
		});
	}
	
	window.genCompressedArr = function(item)
	{
		//var tagPattern = "(\\s*(?:" + songTagRegexpList + ")(?:\\s+\\d+)?(?:\\s*\\(.*\\))?\\s*.*)";
		//var tagRegex   = new RegExp(tagPattern, "gi");
		
		
		var cleanedText = item.text.replace("\r\n","\n");
		var blockList = cleanedText.split("\n\n");
		
		var arrList = [];
		var blockHash = {};
		
		var storeBlock = function(blockTitle,blockText)
		{
			//$.inArray(value,array)
			//if($.inArray(blockTitle, arrList) &&
			if(blockHash[blockTitle])
			{
				if(blockHash[blockTitle] == blockText)
				{
					// text of this block same as already stored, just add title to arrangement list
					arrList.push(blockTitle);
					//console.debug("genCompressedArr.storeBlock: [existing, no change] blockTitle:", blockTitle);
				}
				else
				{
					// Same title, new text - add counter to title
					var counter = 1;
					while(blockHash[blockTitle+" "+counter])
						counter ++;
					
					blockTitle += " "+counter;
					
					blockHash[blockTitle] = blockText;
					arrList.push(blockTitle);
					
					//console.debug("genCompressedArr.storeBlock: [existing, uniqueify] blockTitle:", blockTitle);
				}
			}
			else
			{
				blockHash[blockTitle] = blockText;
				arrList.push(blockTitle);
				//console.debug("genCompressedArr.storeBlock: [new title] blockTitle:", blockTitle);
			}
		};
		
		//console.debug("blockList: ", blockList);
		
		var curBlockTitle = false;
		var curBlockText = [];
		var firstBlock = true;
		for(var idx in blockList)
		{
			var passage = blockList[idx];
			
			var newBlockTitle = false;
			var filtered = [];
			var lines = passage.split("\n");
			for(var lineIdx in lines)
			{
				var line = lines[lineIdx];
				var matchData = tagFormatRegex.exec(line);
				if(matchData)
					newBlockTitle = matchData[1];
				else
					filtered[filtered.length] = line;
			}
			
			//console.debug("current block idx: ", idx, ", newBlockTitle: ", newBlockTitle);
			if(newBlockTitle)
			{
				//console.debug("curBlockTitle: ",curBlockTitle, "text line1: ",curBlockText[0]);
				// first, add block to hash if we have a block already
				if(curBlockTitle)
				{
					//blockHash[curBlockTitle] = curBlockText.join("\n\n");
					storeBlock(curBlockTitle, curBlockText.join("\n\n"));
				}
				else
				// or this is the first block and no title given - assume "Title" block
				if(firstBlock && curBlockText.length>0)
				{
					curBlockTitle = "Title";
					//blockHash[curBlockTitle] = curBlockText.join("\n\n");
					storeBlock(curBlockTitle, curBlockText.join("\n\n"));
				}
				
				firstBlock = false;
				
				// start new block
				curBlockTitle = newBlockTitle;
				curBlockText = [];
			}
			
			curBlockText.push(filtered.join("\n"));
		}
		
		// No block titles found, so make our own
		if(firstBlock && 
		   !curBlockTitle)
		{
			var miniList = curBlockText;//.split("\n\n");
			for(var idx in miniList)
				storeBlock("Verse "+(parseInt(idx)+1), miniList[idx]);
		}
		else
		if(curBlockTitle)
			//blockHash[curBlockTitle] = curBlockText.join("\n\n");
			storeBlock(curBlockTitle, curBlockText.join("\n\n"));
// 			
// 		//qDebug() << "SongSlideGroup::rearrange: Original blocks: "<<blockHash;
// 		//qDebug() << "SongSlideGroup::rearrange: Processing arragnement: "<<arragement;
		
		var output = [];
		for(var idx in arrList)
		{
			var blockTitle = arrList[idx];
			if(blockHash[blockTitle])
			{
				//qDebug() << "SongSlideGroup::rearrange: [process] Block: "<<blockTitle;
				output[output.length] =
					blockTitle + "\n" + 
					blockHash[blockTitle];
				
				
			}
			else
			{
				consoleDebug("editSong(): [process] [Error] Arrangement block not found in original text: ", blockTitle);
			}
		}
		
		var outputText = output.join("\n\n");
		item.text = outputText;
		item.arr = arrList.join(", ");
		
		//console.debug(arrList);
		//console.debug(outputText);
		return item;
		
	};
	
	window.createEditBlock = function(blockTitle,blockText)
	{
		if(!window.editSong.blockLookup[blockTitle])
			window.editSong.blockLookup[blockTitle] = [];
		
		var innerBlocks = blockText.split(/\n\n/);
		
		var blockClass = blockTitle.split(/\s/)[0].toLowerCase();
		
		var blockDiv = $("<li class='outer-block block-type-"+blockClass+"'>");
		
		blockDiv.attr('x:blockTitle', blockTitle);
		blockDiv.attr('x:blockText',  blockText);
		
		var firstInner = true;
		for(var blockIdx in innerBlocks)
		{
			var innerText = innerBlocks[blockIdx];
			var innerBlockDiv = $("<a data-role='button' data-inline='true' class='block-button'>"
				+ "<div class='title'>" + (firstInner ? blockTitle : /*"&nbsp;"*/ "<i>"+blockTitle+" (Contd.)</i>") + "</div>" 
				+ "<div class='text'>"  + syntaxHighlight(innerText) + "</div>"
				+ "</a>");
			blockDiv.append(innerBlockDiv);
			firstInner = false;
		}
		
		$("#edit-box").append(blockDiv).trigger("create");
		
		// Store all the blockDiv's created from this blockTitle so the editor can update all the related divs
		window.editSong.blockLookup[blockTitle].push(blockDiv);
		
		return blockDiv;
	}
	
	window.editSong = function(itemid)
	{
		window.editSong.itemid = itemid;
		
		var item = window.SearchResults[itemid];
		if(itemid == undefined || !item)
		{
			$("#song-content").html("<h3>(No song selected)</h3>");
			return;
		}
		
		
		/*
		$("#song-content").html(""
			+ "<a data-role='button' data-icon='check' data-inline='true' id='save-edit-btn'   href='javascript:void(saveSongChanges("+itemid+"))' ontouchstart='saveSongChanges("+itemid+");return false'"
				+ " data-theme='b'>Save Changes</a>"
			+ "<a data-role='button'                   data-inline='true' id='cancel-edit-btn' href='javascript:void(cancelEditSong("+itemid+"))'  ontouchstart='cancelEditSong("+itemid+");return false'"
				+ " >Cancel</a>"
			+ "<div data-role='fieldcontain'><label for='song-title-edit'>Title:</label>       <input id='song-title-edit' type='text' value='" + item.title + "' size=30></div>" 
			+ "<div data-role='fieldcontain'><label for='song-arr-edit'>  Arrangement:</label> <input id='song-arr-edit'   type='text' value='" + item.arr + "' size=30></div>"
			+ "<textarea id='song-text-edit' rows=30 cols=30'></textarea>"
		)
		// Trigger jQuery mobile decorations
		.trigger( "create" );

		$('#song-text-edit').attr('value', item.text);
		*/
		
		$("#song-content").html("");
		
		var $div = $("<div id='edit-page' class='ui-corner-all ui-shadow ui-body-c'>"
			+ "<h1 style='float:left;display:none'>Song Editor</h1>"
			+ "<a data-role='button' data-icon='check' data-inline='true' id='save-edit-btn'   href='javascript:void(saveSongChanges("+itemid+"))' ontouchstart='saveSongChanges("+itemid+");return false'"
				+ " data-theme='b'>Save Changes</a>"
			+ "<a data-role='button'                   data-inline='true' id='cancel-edit-btn' href='javascript:void(cancelEditSong("+itemid+"))'  ontouchstart='cancelEditSong("+itemid+");return false'"
				+ " >Cancel</a>"
			+ "<a data-role='button'                   data-inline='true' id='edit-text-btn'   href='javascript:void(editText())'  ontouchstart='editText();return false'"
				+ " data-theme='e'>Edit Text</a>"
			+ "<a data-role='button'                   data-inline='true' id='dup-block-btn'   href='javascript:void(dupBlock())'  ontouchstart='dupBlock();return false'"
				+ " data-theme='e'>Duplicate Block</a>"
			+ "<a data-role='button'                   data-inline='true' id='del-block-btn'   href='javascript:void(delBlock())'  ontouchstart='delBlock();return false'"
				+ " data-theme='e'>Remove Block</a>"
			+ "<input id='song-title-edit' type='text' value='" + item.title + "' size=30 style='margin-left:.75em'>"
			+ "<div id='edit-msg' style='margin-left:.75em'>&nbsp;</div>"
			+ "<ul id='edit-box' style='margin-left:-2em'></li>"
			+ "</div>");
		$(document.body).append($div);
		
		$div.trigger( "create" );
		
		// Generate an optimal arrangement if no arrangement given already
		if(item.arr == "")
			item = genCompressedArr(item);
		
		var arrList = item.arr.split(/\s*,\s*/);
		
		var isEmpty = true;
		for(var idx in arrList);
			if(arrList[idx] != "")
				isEmpty = false;
		
		if(isEmpty)
		{
			item = genCompressedArr(item);
			arrList = item.arr.split(/\s*,\s*/);
		}
		
		//console.debug("editSong(): arrList:", arrList);
		
		var cleanedText = item.text.replace("\r\n","\n");
		var blockList = cleanedText.split("\n\n");
		
		//console.debug("editSong(): blockList: ", blockList); 
		
		var blockHash = {};
		
		var curBlockTitle = false;
		var curBlockText = [];
		var firstBlock = true;
		for(var idx in blockList)
		{
			var passage = blockList[idx];
			
			var newBlockTitle = false;
			var filtered = [];
			var lines = passage.split("\n");
			for(var lineIdx in lines)
			{
				var line = lines[lineIdx];
				var matchData = tagFormatRegex.exec(line);
				if(matchData)
					newBlockTitle = matchData[1];
				else
					filtered[filtered.length] = line;
			}
			
			//console.debug("current block idx: ", idx, ", newBlockTitle: ", newBlockTitle);
			if(newBlockTitle)
			{
				//console.debug("curBlockTitle: ",curBlockTitle, "text line1: ",curBlockText[0]);
				// first, add block to hash if we have a block already
				if(curBlockTitle)
				{
					blockHash[curBlockTitle] = curBlockText.join("\n\n");
				}
				else
				// or this is the first block and no title given - assume "Title" block
				if(firstBlock && curBlockText.length>0)
				{
					curBlockTitle = "Title";
					blockHash[curBlockTitle] = curBlockText.join("\n\n");
				}
				
				firstBlock = false;
				
				// start new block
				curBlockTitle = newBlockTitle;
				curBlockText = [];
			}
			
			curBlockText.push(filtered.join("\n"));
		}
		
		// No block titles found, so make our own
		if(firstBlock && 
		   !curBlockTitle)
		{
			var miniList = curBlockText;//.split("\n\n");
			for(var idx in miniList)
				blockHash["Verse "+(parseInt(idx)+1)] = miniList[idx];
		}
		else
		if(curBlockTitle)
			//blockHash[curBlockTitle] = curBlockText.join("\n\n");
			blockHash[curBlockTitle] = curBlockText.join("\n\n");
// 			
		
		//console.debug("editSong(): blockHash:", blockHash);
		
// 		//qDebug() << "SongSlideGroup::rearrange: Original blocks: "<<blockHash;
// 		//qDebug() << "SongSlideGroup::rearrange: Processing arragnement: "<<arragement;

		window.editSong.blockLookup = {};
		
		var firstBlockDiv = 0;
		var output = [];
		for(var idx in arrList)
		{
			var blockTitle = arrList[idx];
			if(blockHash[blockTitle])
			{
				//qDebug() << "SongSlideGroup::rearrange: [process] Block: "<<blockTitle;
				/*
				output[output.length] =
					blockTitle + "\n" + 
					blockHash[blockTitle];
				*/
				var blockText = blockHash[blockTitle];
		
				var blockDiv = createEditBlock(blockTitle, blockText);
				
				firstBlockDiv = blockDiv; /// NOTE for debugging
				
			}
			else
			{
				//console.debug("editSong(): [process] [Error] Arrangement block not found in original text: ", blockTitle);
			}
		}
		
		$( "#edit-box" ).sortable();
		
		// NOTE for debugging
		//window.editText(firstBlockDiv);
		
	}
	
	window.enableSongBlockClick = function(callback, msg)
	{
		$("#edit-box .outer-block").on('click.songBlockClick', function() {
			callback($(this).closest('.outer-block'));
		});
		
		$("#edit-msg").html("<b>"+msg+"</b>");
	}
	
	window.disableSongBlockClick = function() 
	{
		$("#edit-box .outer-block").off('click.songBlockClick');
		$("#edit-msg").html('&nbsp;');
	}
	
	
	function setupSyntaxHighlighter(textarea)
	{
		var syncHighlights = function(ta)
		{
			var val  = ta.val();
			var html = syntaxHighlight(val);
			ta.closest(".textarea-highlight-wrap").children(".textarea-highlight-display").html(html);
		}

		var wrap = $("<div class='textarea-highlight-wrap'><div class='textarea-highlight-display'></div></div>");
		wrap.insertAfter(textarea);
		wrap.append(textarea);
	
		textarea.on('keyup', function() {
			syncHighlights($(this));
		});
		
		var display = wrap.children(".textarea-highlight-display");
		display.css('font-size',   textarea.css('font-size'));
		display.css('line-height', textarea.css('line-height'));
		
		// sync height of wrapper to textarea
		var timerid = setInterval(function() {
			var $ta = wrap.children("textarea");
			wrap.height($ta.height() + parseFloat($ta.css('padding-top')) + parseFloat($ta.css('padding-bottom')));
		}, 250);
		
		textarea.attr('x:syntaxHighlighter.timerid', timerid);
		
		textarea.bind('remove', function() {
			clearInterval(textarea.attr('x:syntaxHighlighter.timerid'));
		});
		
		syncHighlights(textarea);
	}
	
	window.editText = function(blockDiv)
	{
		if(!blockDiv)
		{
			enableSongBlockClick(window.editText, "Touch a block to edit the text in that block or block group.");
			return;
		}
		
		disableSongBlockClick();
		
		var blockTitle = blockDiv.attr('x:blockTitle');
		window.editText.currentBlockTitle = blockTitle;
		
		var elm = $("<div class='ui-body ui-body-a' id='editblock-text'><center><h3>Edit " + blockTitle + "</h3></center>"
			+ "<input id='song-block-title-edit' type='text' value='" + blockTitle + "' size=30>"
			+ "<textarea id='song-block-text-edit'></textarea>"
			+ "<a data-role='button' data-icon='check' data-inline='true' id='song-block-save-btn' data-theme='b'>Save Changes</a>"
			+ "<a data-role='button' data-inline='true' id='song-block-cancel-btn'>Cancel</a>"
			+ "</div>");
			
		$(document.body).append(elm).trigger("create");
		window.editText.elm = elm;
		
		var win = $(window);
		elm.css('top', win.height() /2 - elm.height()/2 + $(window).scrollTop() );
		elm.css('left', win.width() /2 - elm.width() /2 );
		
		$("#song-block-text-edit").val(blockDiv.attr('x:blockText'));
		setupSyntaxHighlighter($("#song-block-text-edit"));
	
		$("#song-block-cancel-btn").on('click', function()
		{
			window.editText.elm.remove();
		});
		
		$("#song-block-save-btn").on('click', function()
		{
			var blockTitle = window.editText.currentBlockTitle;
			var blockDivList = window.editSong.blockLookup[blockTitle];
			
			for(var blockDivIdx in blockDivList)
			{
				var blockDiv = blockDivList[blockDivIdx];
				
				// Remove all inenr blocks
				blockDiv.children().each(function() {
					$(this).remove();
				});
				
				// Remove old title class
				var oldBlockTitle = blockDiv.attr('x:blockTitle');
				var oldBlockClass = oldBlockTitle.split(/\s/)[0].toLowerCase();
				blockDiv.removeClass("block-type-"+oldBlockClass);
				
				// Get title and new text
				var blockTitle = $.trim($("#song-block-title-edit").val()); //blockDiv.attr('x:blockTitle');
				var blockText  = $.trim($("#song-block-text-edit").val());
				
				blockDiv.attr('x:blockTitle', blockTitle);
				blockDiv.attr('x:blockText',  blockText);
				
				var blockClass = blockTitle.split(/\s/)[0].toLowerCase();
				blockDiv.addClass("block-type-"+blockClass);
				
				// Recreate inner blocks
				var innerBlocks = blockText.split(/\n\n/);
				
				var firstInner = true;
				for(var blockIdx in innerBlocks)
				{
					var innerText = innerBlocks[blockIdx];
					
					var innerBlockDiv = $("<a data-role='button' data-inline='true' class='block-button'>"
						+ "<div class='title'>" + (firstInner ? blockTitle : /*"&nbsp;"*/ "<i>"+blockTitle+" (Contd.)</i>") + "</div>"
						+ "<div class='text'>"  + syntaxHighlight(innerText) + "</div>"
						+ "</a>");
					blockDiv.append(innerBlockDiv);
					firstInner = false;
				}
				
				blockDiv.trigger("create");
			}
			
			window.editText.elm.remove();
		});
	}
	
	window.dupBlock = function(blockDiv)
	{
		if(!blockDiv)
		{
			enableSongBlockClick(window.dupBlock, "Touch a block to duplicate that block's contents and add it to the end of the song.");
			return;
		}
		
		disableSongBlockClick();
		
		var blockTitle = blockDiv.attr('x:blockTitle');
		var blockText  = blockDiv.attr('x:blockText');
		
		createEditBlock(blockTitle, blockText);
	}
	
	window.delBlock = function(blockDiv)
	{
		if(!blockDiv)
		{
			enableSongBlockClick(window.delBlock, "Touch a block to remove that tag block from the song arrangement.");
			return;
		}
		
		disableSongBlockClick();
		
		blockDiv.remove();
	}
	
	window.cancelEditSong = function(itemid)
	{
		$("#edit-page").remove();
		showListItem(itemid);
	}
	
	window.saveSongChanges = function(itemid)
	{
		var item = window.SearchResults[itemid];
		if(itemid == undefined || !item)
		{
			$("#song-content").html("<h3>(No song selected)</h3>");
			return;
		}
		
		// Build compressed text and arrCsvList
		var $editList = $( "#edit-box" );
		
		var arrLookup = {};
		var textList = [];
		var arrList = [];
		
		$editList.children().each(function() 
		{
			var blockDiv = $(this);
			var blockTitle = blockDiv.attr('x:blockTitle');
			var blockText  = blockDiv.attr('x:blockText');
			
			if(arrLookup[blockTitle])
			{
				// this block already in textList, just add to arr list
				arrList.push(blockTitle);
			}
			else
			{
				// flag this block title as processed
				arrLookup[blockTitle] = true;
				
				// Add block to arrangement
				arrList.push(blockTitle);
				
				// Add text source to the text list
				textList.push(blockTitle+"\n"+blockText);
			}
		});
		
		var compressedText = textList.join("\n\n");
		var arrCsvList = arrList.join(", ");
		//console.debug("window.saveSongChanges(): arrCsvList:",arrCsvList,", compressedText:",compressedText);
		//console.debug("window.saveSongChanges(): arrCsvList:"+arrCsvList+", compressedText:"+compressedText);
		
		// Update internal text representation
		item.title = $('#song-title-edit').attr('value');
		item.text  = compressedText;
		item.arr   = arrCsvList;
		
		//console.debug("window.saveSongChanges(): item:",item);
		
		// Dont save - just debugging right now
//		$("#edit-page").remove();
// 		showListItem(itemid);
// 		return;
		
 		showLoadingMsg();
		
		var postData = 
		{
			title	: item.title,
			text	: item.text,
			arr	: item.arr,
			itemid	: itemid,
			// Server needs ListMode so it can correctly contextualize the itemid into either a SongID or a GroupNum
			mode	: window.ListMode,
		};
		
 		var url = '/tablet/save_song';
		$.ajax({
			type: "POST",
			url: url,
			data: postData,
			success: function(data)
			{
				item.mapping = data.mapping; // download new arrangement mapping into item
				
				$("#edit-page").remove();
				showListItem(itemid);
				
				hideLoadingMsg();
			}
		});
	}
	
	window.pollLiveSlide = function()
	{
		var url = '/tablet/poll_live_slide';
		$.ajax({
			type: "GET",
			url: url,
			error: function(data)
			{
				//console.debug(url + ":error:",data);
				showConLost();
			},
			success: function(data)
			{
				hideConLost();
				
				if(!data.error)
				{
// 					try
// 					{
						var groupNum = data.groupIdx;
						var slideNum = data.slideIdx;
						
						if(groupNum != window.CurrentListItemDisplayed)
						{
							// We don't change groups on the "control" tablet because
							// we assume the user wants to control the changing of groups
							if(window.TabletMode == 'control')
								return;
							
							// If viewer, assume we're in 'file' list mode and have current list of songs,
							// so we just tell it to show the next live song
							consoleDebug("pollLiveSlide(): group# changed, showing new group:",groupNum);
							showListItem(groupNum);
						}
						
						if(window.pollLiveSlide.lastLiveSlide == slideNum &&
						   window.pollLiveSlide.lastLiveGroup == groupNum)
						{
							//consoleDebug("pollLiveSlide(): No change in slide#/group#");
							return;
						}
						
						window.pollLiveSlide.lastLiveSlide = slideNum;
						window.pollLiveSlide.lastLiveGroup = groupNum;
						
						var item = window.SearchResults[groupNum];
						if(!item)
						{
							consoleDebug("pollLiveSlide(): Group num given does not exist in window.SearchResults, groupNum:", groupNum);
							if(window.TabletMode == 'viewer')
								showListItem(false);
							return;
						}
						
						var slideMapping = item.mapping;
						
						// We have to find slideNum in mappings and map back to non-arranged slide
						// If not found in mappings, use 1-1 mapping
						
						var mappedIdx = -1;
						// slideMapping is a hash, not a straight list, hence the 'var x in y' syntax
						for(var i in slideMapping)
						{
							if(mappedIdx < 0)
							{
								var mappingList = slideMapping[i];
								if(!mappingList)
									mappingList = [];
								
								for(var j in mappingList)
									if(mappingList[j] == slideNum)
										mappedIdx = i;
							}
						}
						
						if(mappedIdx < 0)
							mappedIdx = slideNum;
							
						var $block = $("#slide-idx-" + mappedIdx);
						
						consoleDebug("pollLiveSlide(): Updating live block, mappedIdx:",mappedIdx);
						updateLiveSlideUI($block);
// 					}
// 					catch(e)
// 					{
// 						consoleDebug(e);
// 					}
				}
				else
				{
					if(window.TabletMode == 'viewer')
						showListItem(false);
				}
			}
		});
	}
	
	
	function reloadList(pollingFlag, md5)
	{
		if(pollingFlag == undefined)
			pollingFlag = 0;
		if(md5 == undefined)
			md5 = 0;
			
		if(!pollingFlag)
			showLoadingMsg();
		
		// accessCount is used to ignore results received after
		// another request has been sent. For example, if calling reloadList()
		// in response to user keypresses, this is possible:
		// [request1] [request2] [result1] [result2]
		// In this case, it's a waste of time to update the UI with [result1] because
		// [request2] has already been sent, invalidating any info received in [result1],
		// so we just ignore [result1] if the accessCount of the result is less than
		// the accessCount of the most recent request.
		if(!reloadList.accessCount)
			reloadList.accessCount = 0;
		
		reloadList.accessCount ++;
		var thisCount = reloadList.accessCount;
		
		// md5 only relevant if polling - server uses it to check for change
		var url = '/tablet/list?mode='+window.ListMode+'&filter='+window.ListFilter+'&poll='+pollingFlag+'&md5='+md5;
		$.ajax({
			type: "GET",
			url: url,
			error: function(data)
			{
				//console.debug(url + ":error:",data);
				showConLost();
			},
			success: function(data)
			{
				hideConLost();
				
				if(reloadList.accessCount > thisCount)
				{
					// another request was sent while this one was pending - ignore these results and wait for the next set
					return;
				}
				
				//alert("Got post data:"+data+", type:"+typeof(data));
				if(typeof(data) == "string")
				{
					// something wierd on server - should be JSON!
					//errorFunc();
				}
				else
				{
					if(data.nochange)
					{
// 						clearTimeout(reloadList.timerId);
// 						reloadList.timerId = setTimeout(function() { reloadList(true, data.md5); }, 1000);
						return;
					}
						
					// Remove existing list
					$("#results-list").remove();
					$("#result-list-box span.hint").remove();
					
					// Re-create the <UL> list
					var list = $('<ul data-role="listview" data-inset="true" id="results-list"></ul>');
					
					// Clear the results cache
					window.SearchResults = {};
					
					// Create new list elements
					for(var i=0; i<data.list.length; i++)
					{
						var item = data.list[i];
						var shortTitle = item.title.substring(0,20) + (item.title.length > 20 ? "..." :"");
						
						// 'ontouchstart' added per http://matt.might.net/articles/how-to-native-iphone-ipad-apps-in-javascript/
						// See 'Detecting touch and gesture events' - "...good reason to do this..."
						list.append($("<li><a href='javascript:void(showListItem("+item.id+"));' ontouchstart='showListItem("+item.id+");return false'>"+shortTitle+"</a></li>"));
						
						window.SearchResults[item.id] = item;
					}
					
					$("#result-list-box").append(list);
					// Re-apply the jQuery-mobile List Widget behaviours
					list.listview();
					
					// Display hints about the results if needed
					if(data.more)
						$("#result-list-box").append($("<span class=hint>More than "+data.cutoff+" items found...</span>"));
					else	
					if(data.list.length <= 0)
						$("#result-list-box").append($("<span class=hint>" + (window.ListFilter == "" ? "No songs found!" : "No matching songs found.") + "</span>"));
					
					// Update the song preview on the right
					if(window.TabletMode == 'control')
					{
						// NOTE FOR DEBUGGING
// 						showListItem(7);
// 						editSong(7);
							
							
							
						if(data.list.length == 1)
							showListItem(data.list[0].id);
						else
						if(window.CurrentListItemDisplayed)
							showListItem(window.CurrentListItemDisplayed);
						else
							showListItem(false);
					}
				}	
				
				hideLoadingMsg();
				
// 				// If user switches list 'modes' (from db->file) between reloads,
// 				// multiple reload timers could get started - this just ensures only one reload timer is active.
// 				clearTimeout(reloadList.timerId);
				
				reloadList.latestMd5 = data.md5;
			},
			//error: errorFunc
			
		});
	}

	// Update tablet mode based on url
	if(window.location.search.indexOf("tablet=viewer") > -1)
	{
		updateTabletMode("viewer");
	}
	else
		// Reload if not viewer because updateTabletMode(viewer) reloads list in file mode
		reloadList();
		
	// Setup a timer to poll the server in approx 1sec for changes
	if(!DEBUG_DISABLE_POLLING)
		reloadList.timerId = setInterval(function() { reloadList(true, reloadList.latestMd5); }, 1000);

});

</script>
</body>
</html>
