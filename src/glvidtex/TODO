Note: Video Conversion Example:
	for i in `ls .`; do(mencoder $i -ofps 23.976 -oac mp3lame -lameopts abr:br=92 -ovc xvid -xvidencopts bitrate=2000 -o $i-xvid.avi);done;


Target: pixelrevo-player
	Components:
		Core:
			GLWidget / GLDrawable
				Drawable Items:
					GLVideoInputDrawable (done)
						- TODO:
							Crossfading doesnt *quite* work smoothly enough -
							I think this is due to the initaliztion of the V4L subsystem for the second camera - if the V4L input is already open, it *should* crossfade fine....
					GLVideoLoopDrawable (done)
					GLVideoFileDrawable (done)
						- TODO: 
							Add properties for:
								- play/pause/ff/rw/etc
								- Add seek method/slots
								- Query play time for remote controllers
					GLVideoReceiverDrawable (done)
					GLImageDrawable (done)
					GLTextDrawable (done)
						- TODO:
							Add properties for text shadow / color etc
					GLRectDrawable
				Todo Items:
					- (done) Add native cross fading support in GLVideoDrawable (since all items above will probably derive from GLVideoDrawable)
					- (done) Add a 'transmit video' property to Video(input|file) drawables
						- Called it 'videoSenderEnabled' - automatically allocates port if none set explicitly, starting from 7755 and up (tests to see if port is in use.) Port used can be queried from 'videoSenderPort' property, or set using same proprty.
					- Add dropshadow support for image/text/rect
					- Add outline support for image/text/rect/videos
					- Add (explicit?) property animations for GLDrawable rect/opac props
					- Consider adding a GLWebDrawable .. ? (idea: Use the proxy method used in DViz to render using QWebView off screen and feed frames as a video source...?)
		Playing Functionality:
			- Two things to 'play':
				- inputs for the drawables (videos/images/etc)
				- the entire layout
					- Structure Concept:
						- Scene
							- All the elements as a bulk collection
							- Layout
								- Positions elements, shows/hides elements
			- Need a controller which:
				- loads playlists for each item and for layout
				- syncs changes to clock
				- listens for changes to playlist object and reloads accordingly
				
			- Need playlist object:
				- list of playlist items
					- item:
						- drawableId & propName/value
						- 
						
			
					





Update GLDrawable to either support:
	- Blue Alpha Blending
		- Already supports alpha masks
		- Use the blue channel (or some other channel) to control blending the pixel between BLACK and the texture color
		- This would allow drawing black lines on top of the texture using the alpha mask, instead of requiring a third texture for an overlay (in addition to the alpha mask)
	- Or a third texture for overlay on top of the alpha mask
		
Update VideoThread to support HD
	Need to create a variable length buffer
	Move timing code into buffer control
	Selectivly hold frames if falling behind 
	
	Also, get YUV420P working in raw format to allow YUV conversion on the GPU
