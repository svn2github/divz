TODO:
	BUGS:
		- [FIXED] When viewing remote using vid send/receiver thru a VideoWidget, one of the video streams seems to 'back up' and only "unspools" when sent live thru a GLVideoDrawable... ???
			- Disabled buffering on VideoReceiver - hackish fix, I know.
		- [DONE] Live monitor from player seems to be buffered - check on that
		- [DONE] Change the shortcut key in the file menu in director for the Connections and Live Monitor (both use "C")
		- [CANTFIX] Need to push text rendering into another thread, causing live video to stutter (see the 4fps clock over live video)
			- Optimized as much as I can right now, but rendering still takes ~80-100ms with shadow and outline
			- Can't push QTextDocument into another thread for some reason
			- Added a 'cached image' feature for transmitting text from director to player so the player won't have to re-render static text already rendered on the director (but will have to re-render new text)
		- [FIXED] Deleting an item will then crash the editor on save
		- [FIXED] PlayerSetupDialog: Clicking CONNECT before TEST crashes
		- [FIXED] PlayerSetupDialog: Must click TEST then CONNECT 2x to connect
		- [FIXED] Director: The playerlist item changed signal from the player doesnt highlight the right item
		- [FIXED] Director: Remove the fractional seconds from the director playlist time
		- [FIXED] Cross-fading between CameraThread's in GLVideoDrawable *seems* to 'fade thru black' - but only in the OpenGL painter version. The QGraphicsItem version fades front in.
			* Can't test till at a workstation with dual video inputs - tomorrow or Tuesday
			- Something to do with glBlendFunc - only fades thru black using OpenGL - using QGraphicsScene, it paints fine
			- "Fixed" by adding a CrossFadeMode enum - videos and cameras only fade the front image out, not the back image in. 
				Whereas text and images, fade front out AND back in - rather a "ductape" fix - but seems to work for now. 
		- [FIXED] Text crossfading seems to be broken - at least in player via the setProperty command - seems to set text THEN try to crossfade...
			- Problem was added when we switched to using the QSharedPointer for VideoFrames. Fixed by making a new m_frame2 in GLImageDrawable before crossfading.
		- [FIXED] Make GLDirector NOT crash when the player is disconnected!
			- Crash seems to be deep inside the Qt networking code (!!!!!!!)
			- Short of recompiling Qt, I don't have a workaround for the crash...yet...
			- Not a showstoper yet, so moving on to other problems for now.
			- Updated: Seems to not crash at the same point now - now when player closes, it gets caught in a loop in VideoReceiver - then when player comes back, THEN it crashes
			- Need to figure out where the latest crash is an if we can fix this one.
			- Seems to be caused *by* VideoReceiver - when no videoreceiver active, player can close and reopen without crashing the director
				- Confirmed this is the cause of crashing - VideoReceiver...
		- [FIXED] Sometimes, clicking Connect on the player doesnt fully connect - logs in, but nothing transmitted, window not moved, etc - clicking connect again works
		- [FIXED] Clicking 'Black' doesnt always fade in black overlay
		- [FIXED] HUGE memory leaks/problems with 12 megapixel images in SlideShowWindow - when running thru a list of 6x 12MP images, by the 4th image the computer is already out of RAM - out of 4 GB!! Crikey. 
			- Memory usage grows each scene change - not sure why. Texture upload, sure - but I thought that would use GPU RAM. Need to investigate and add some sort of scaling-down.
			- Converted GLImageDrawable to use a BUFFER_POINTEr video frame - still uses memory each time it goes visible tho
			- Are images not getting removed from the screen when faded off?
			- Free buffer_pointer when off screen?
			- Implemented aggressive memory management in GLImageDrawable by freeing memory by overriding GLDrawalle::setGLWidget. Only frees memory that has an m_imageFile to reload it as needed.
		- [FIXED] Player: QtVidSrc videos should fade out volume when cross-fading to a different video in the playlist
		- [FIXED] Director: Length of videos from QtVideoSource aren't automatically detected for use in playlists
		- [FIXED] Director: Duration box bug - duration of previous item seems to propogate to the next item selected, instead of the new item updating the box correctly
			- Totally reworked the playlist area - changed the list to an editable table
		- [FIXED] Icons bad - toolbars going bad
			- Just deleted .build/qrc_* and re-built
		- [FIXED] Text shadow rendering outside box
			- Added 12px padding internally to RichTextRenderer's output 
		
		- [TMP-FIX] Video Encoding "problems"
			- Way to much CPU usage - 157%-ish on a dual-core 2.4 GHz...causing live video to stutter
			- Consider putting it either in another thread or in a whole other process with shared memory
				- Can we push it off onto the network somehow??
			- Temporarily disabled encoder in PlayerWindow till this is addressed.
		
		- Director: playlist text looses formatting when playing?
		- Make the Video Input control panel in director default to last network source
			- [DONE] Consider removing "(This Machine)" as an option
				- Dont put a message box - just a simple QLabel
		- Make the video input control panel automatically update when players are connected
		- Changing scenes doesnt always work in player - I'd say 1/10th of the timer, it stays black
		- If player errors out during connect, button stays grayed out till close and re-open dialog
		
		- Player cant crossfade between two scenes that each have a videoinput drawable on them
			- E.g. if only one of the two scenes in the crossfade have a videoinput drawable, crossfade executes fine
			- But if both scenes have a vidinput on them, then the eventloop appears to get overwhelmed (or something is)
			  that causes all other events (including the crossfade timer events) to be ignored
			  
		- Director: QtVidSrc videos play only a few seconds in director preview
			- Not repeatable at office
		- Director: QtVidSrc videos are behind the player - need to sync
		- GLPlaylist: When erasing duration (user set duration to 0 to re-enable auto-dur), need a way to re-calc the auto dur, say get length of video, etc.
		
		- GLTextDrawable scroller code for some reason is reporting the first image's width as WAY too large (like 100x or 1000x)
		 
	NEEDED FEATURES:
		- Slide types - for rendering the automatic slides
		- Scene overlay - for stuff that doesnt change
		- [DONE] Slides auto change - for changing automatically
		- [DONE] Text crawler - for showing RSS feeds
		- [DONE] JSON interface for web API
		
		- UI in DirectorWindow to control scene playlist playing functionality
	
		- Sharpening Filter (GLSL or image based, scaled up)
		
		- Need a way to enable/disable encoding from the director
		- Need to set the AR of the encoder from director
		- Make an "option" to reconfig the item control area as mini windows...?
			- So you can access the video switcher and text settings without switching between the two...?
		- Transmit slide group changes to player when editor window closed
			- Need to cross fade between slides
			- Prompt to send?
		- When an item is edited in the editor, it needs to update the filtered item list in the director
		- Need to drag/drop to re-arrange slide list
		- Add 'setup' options to the video switcher to configure the video feed from director
			- Input
			- Should these be part of the editor?
				- Flip
				- BHCS
				- Crop
		- [STARTED] Need to add controls to the VideoSender to remotly control transmission size/fps
			- The code is there to control size, but possibly need UI for it...maybe...
		- Either (a) integrate with DViz songs.db and Bible functionality or (b) integrate VideoSender with DViz
			- Add a GroupType and SceneType to GLSceneGroup and GLScene, respectively.
				 - SceneTypes are a SceneTypeID, and the SceneTypeFactory gives a SceneTypeEngine which:
				 	- Lists the needed item names/types
				 		E.g. for a WeatherScene, it might need:
				 			#WeatherIcon	- SVG
				 			#Temp		- Text
				 			#MinTemp 	- Text
				 			#MaxTemp	- Text
				 	- Audit the scene to make sure the names above are present
				 	- Apply the content to tthe scene before going live with the scene
				 	- Generate a ControlWidget which emits a 'setProperty' signal to change settings in the director
				 	- (Maybe) Generate an EditorWidget to setup the scene in the editor
				- GroupTypes are a GroupTypeID and the GroupTypeFactor gives a GroupTypeEngine which:
					- GroupTypes use scenes as templates for generating multiple scenes 
						- Similar to above, they look for required elements in the template
						- Then they duplicate the template to make scenes in a new group
					- The new group has its GroupType set to the id of the engine
					- The engine is then responsible for generating the QAbstractListModel for the list of scenes in the group
					- The engine also gets a pointer to the list view so it can reconfig the list view as it desires
						- The default engine must be sure to reset the list view
					- Group engines can generate slides that either use the default SceneType or a custom scene type
		- Border/Dropshadow control for items
			- Right now, text and images
		- MUST have per-camera BCHS controls
		- Add copy/paste to editor
		- Durations on scenes
			- Auto calced based on max length playlist of items
			- Or manually set
		- Durations on groups
			- Auto calced based on durations of all the scenes
		- Add a "play" interface to groups to loop thru scenes
			- Some how emit a signal when need to change scenes?
		- Add a play interface to collection to loop thru groups
		
		- [DONE] Add a 'remove from playlist' button
		- [DONE] Crossfading between scenes
		- [DONE] Add a simple rectangle item to draw boxes, panels, lines with
		- [DONE] Make "Test Connection" just TEST in player setup
		- [DONE] Make a checkbox for "connect on startup"
		- [DONE] Add button to "Connect To" beside "Test"
		- [DONE] Transmit slide group to player when connected
		- [DONE] Add Item autofit to editor
		- [DONE] Allow player to run playlists on items by itself without being connected to the director
	
	IDEAS:
		- Players need to communicate with each other if in a "group"
			- E.g. part of a wall display
			- Elect one as the master coorinator for timing/sync of video playback, etc
		- Add an "output analysis" to the PlayerSetupDialog
			- Auto-updated histogram when connected
			- Need a histo of rgb values not just grayscale
			- Add graphs of min/max/avg for hue/sat/value
		- Add image slow-zoom animation (zoom in/out, setc)
		- [DONE] SVG animation playback/rendering
			- Not the smoothest thing around, but it works...
		- Add a Weather Item based on Google API code in $QT_HOME/qt/demos/embedded/weatherinfo.cpp
		- [DONE] Some method to auto-balance/tune camera's HSV so they match each other?
			- VideoInputColorBalancer.cpp
		- Adjust color curves wtih matrixes? (Not just shift entire hues/sats, but curves.)
		- Add in "Levels"/Gamma adjustment vis a vi:
			outPixel = (pow(((inPixel * 255.0) - inBlack) / (inWhite - inBlack),
                		inGamma) * (outWhite - outBlack) + outBlack) / 255.0;
                	From Graphics Gems ch 22, Fig 22-2, http://http.developer.nvidia.com/GPUGems/gpugems_ch22.html
                - Add method to VideoFrame to store a GLuint textureId so multiple GLVideoDrawables rendering the same VideoFrame don't have to upload the buffer/QImage to the video card multiple times
                	- the first drawable to get the frame checks for a textureId - if none is set, then upload the texture and set the textureId on the frame. But if one is set,
                		then use that textureId to paint the frame  
		- Text scroller
			- Renders a playlist of text items 
			- Calc the current # of items to fill the screen layed out H or V, then render that many + 1 as a QImage
				- Use QImage::copy() to render a moving rectangle
				- When one item falls off the "left", re-render
				- OR just thought of this - upload the entire rendered QImage (many+1) to a texture, then only render the subrect part of the texture by adjusting the 
				  texture coordinates of the render output (the sourc rect in updateRects())
		- HTML snippet widget
			- Embed a QWebKit widget's output for view-only content
		- Store pixmaps/images of scenes, groups, and drawables in the GLScene/GLSceneGroup/GLDrawable for rendering as icon in the appros list models
		- Get layouts working
		- Integrate with the three most used "generators" from DViz:
			- Bible
			- Songs
			- Image Slideshows
			- Each generates a GLSceneGroup containing multiple GLScenes with appros GLDrawables to represent the content
		- Undo/redo
		- Idea: Can we reduce network latency by breaking the frame apart into subsections and transmitting them in parallel over seperate sockets? 

TARGET DATE: 12/11 9am
	Features Required by 12/11 9am:
		[DONE] - Network Control of a player binary
		- Player Binary must:
			- Load scene groups and play the required group/scene/layout on demand over network
				- TASKS:
					[DONE] Create a GLPlayerServer class, feature bullets:
						Listen on a port
						Accept data "frames", similar to the way the VideoReceiver accepts input (header + data block)
							Data block is a byte array for a QVariantMap
							Required Map Keys:
								- Sequence # (auto incremented number)
								- Command (e.g. loadSlideGroup, etc. - compile a list of valid comments)
								- QVariantMap is passed enmass as a ref (&) to the command
								- Command should be a slot that accepts a QVariantMap 
							Think of commands as slot calls
						Responds to conected client ala a signal
							GLPlayerServer should have a slot that can be called with a QVariantMap 
								One of the keys should be a "responseName"
								The client should function like the server, responses are slots that accept a QVariantMap
					[DONE] Create command slots for the GLPlayerServer class:
						- Functions needed:
							[TODO] - SetBlackout
								- Black out the output 
							- LoadSlideGroup
								- Only one slide group is "Active" in the player at once
								- Dont add items if items not in the viewport
							- SetSlide
								- Set the slide by ID
							[TODO - implement layouts] - SetLayout
								- Set the layout on the slide by ID
							- SetUserProperty
								- Set the user prop on a GLDrawable by drawable ID
							- SetVisibility
								- Set visiblility flag on a drawable by ID
							[TODO] - DownloadFile
								- Transmit a file from the controller to the player over the network so it can be loaded
								- Need to adjust the file-based classes to load files from the "network download" location if not on disk
									- GLImageDrawable
									- GLVideoLoopDrawable
									- GLVideoFileDrawable
									- Others?
							- QueryProperty
								- Query a Q_PROPERTY on a drawable by drawable ID & property name
								- Response is emitted as a "signal" (see above)
							- QuerySlide
							- QueryLayout
								- Query the active slide/layout
								- Response is emitted as a "signal" (see above)
							- SetAlphaMask
							- SetKeystone
							- SetWindow
							- SetFlip
							- SetIgnoreAR
							- SetViewport
							- SetCanvasSize
							- SetBCHS
								- The above set various player parameters ala the INI file reading in the PlayerWindow.cpp class
								- Provide corresponding query methods to read those player parameters back
							[TODO] - FUTURE:
								- Add commands to set up system (OS) methods such as 
									Time/Date
									IP Address
									Users/Passwords
									etc
					[TODO] Add properties to GLTextDrawable for the text color/outlines/etc
					
						
			[DONE] - Set visibility/user props over network on demand
			[DONE] - IF TIME: Send back video
			[DONE] - IF TIME: Run playlists
		- Director Screen
			[DONE] - TASKS:
				- Create GLPlayerClient class
					- Client half of the server above
					- Sends command packets
					- Accepts incoming response packets
			- Must connect to more than one player for control
				- For target date, we need at least two players:
					- FoH (front of house, cloned output or double wide - not sure yet)
					- Wash (player with double-wide canvas for output to two projectors)
			[DONE] - Player Setup UI:
				- Player "Code"/Title
				- IP Address/Port
				- Alpha Mask
					- Paintbrush-esque UI with simple rects/polygons....???
				- Keystoning
				- Window Pos/Size
				- Flip H/V
				- Ignore AR
				- Viewport/Canvas (loaded from slide group...)
				- BCHS Adjustments
				- Control Option:
					- Control player individually
						- UI will display player with List UI(below) in a "tab" ala firefox webpage
					- Combined Player Control 
						- Viewport rectangle selection
						
				- TASKS:
					[DONE] - Create UI for this setup screen in designer
					[DONE] - Create a simple widget for keystoning
						- Widget displays a rectangle with four corners that are draggable
						- Sends keystoning coordinates to player in real time
						- Be sure to provide numerical inputs below the widget for manual entry of keystone values
					[DONE] - IMPORTANT:
						- Try to integrate the cvFindPlanarHomagraphy function
					[DONE] - Create data structure to store player settings
						- Some sort of orm class
						- From/To bytearray
						- PlayerList class
							- Derive from a AbstractITemList
							- Write/Load from byte array
							- Save to QSettings?
			[DONE] - List UI:
				[DONE] - 1. List of slide groups available
				[DONE] - 2. List of slides in selected slide group
				[DONE] - 3. List of layouts in selected slide (selecting slide goes live)
				[DONE] - 4. List of user-conrollable items on current slide/layout
				[DONE] - 5. Panel for:
					- Top: Layouts
					- Mid: Live area
					- Lower: Left: List of items, right: Top: Visible btn, Bottom: Value input
			[TODO] - Black/unblack Master UI btn
			[DONE] - All players get the live slide, Editor indexes viewports by player 
				- E.g.  Player "FOH"  viewport (0,0)-(2048x768)
					Player "Wash" viewport (0,1024)-(2048x768)
				So canvas would be 2048x1536, with 1024x768 quads for each projector
		[DONE] - Editor Screen
			[DONE] - Edit one slidegroup at a time
			[DONE] - List of slides on left
			[*TODO*] - List of key frames on top
				- Horizontal row of icons
				- Always a blank icon on the right to edit
				- Always editing the currently-selected icon
			[DONE] - Main editing area in center
			[DONE] - Toolbar for adding items
			[DONE] - Setup canvas size
			[DONE] - Property editor on right to change the main property 
			
			- TASKS:
				- [DONE] Add AbstractListModel methods to the GLSceneGroup and GLScene classes
				[DONE] - Add a user property flag to GLDrawables
				[DONE] - Create property editor panels based on the old livelayer work
				[DONE] - Create UI in Qt Creator
				[DONE] - Create GLSceneGroupCollection as a meta-group of scenes
					- [DONE] From/to byte array methods
					- [DONE] Write/read from file
					- [DONE] Index scene groups by ID as well
					- Add a "editSequence" value to collection->group->scene classes for tracking edits and when to re-transmit changed slides
				
		[DONE] - Need a document type containing multiple slide groups
		- Need to consider not sending GLDrawables/slides to players that dont need them



Note: Video Conversion Example:
	for i in `ls .`; do(mencoder $i -ofps 23.976 -oac mp3lame -lameopts abr:br=92 -ovc xvid -xvidencopts bitrate=2000 -o $i-xvid.avi);done;


Target: pixelrevo-player
	Components:
		Core:
			GLWidget / GLDrawable
				Drawable Items:
					GLVideoInputDrawable (done)
						- TODO:
							Crossfading doesnt *quite* work smoothly enough -
							I think this is due to the initaliztion of the V4L subsystem for the second camera - if the V4L input is already open, it *should* crossfade fine....
					GLVideoLoopDrawable (done)
					GLVideoFileDrawable (done)
						- TODO: 
							Add properties for:
								- play/pause/ff/rw/etc
								- Add seek method/slots
								- Query play time for remote controllers
					GLVideoReceiverDrawable (done)
					GLImageDrawable (done)
					GLTextDrawable (done)
						- TODO:
							Add properties for text shadow / color etc
					GLRectDrawable
					GLVideoMjpegDrawable (done)
				Todo Items:
					- (done) Add native cross fading support in GLVideoDrawable (since all items above will probably derive from GLVideoDrawable)
					- (done) Add a 'transmit video' property to Video(input|file) drawables
						- Called it 'videoSenderEnabled' - automatically allocates port if none set explicitly, starting from 7755 and up (tests to see if port is in use.) Port used can be queried from 'videoSenderPort' property, or set using same proprty.
					- Add dropshadow support for image/text/rect
					- Add outline support for image/text/rect/videos
					- Add (explicit?) property animations for GLDrawable rect/opac props
					- Consider adding a GLWebDrawable .. ? (idea: Use the proxy method used in DViz to render using QWebView off screen and feed frames as a video source...?)
					
			Data Structure:
				Schedule
					Each Schedule Entry Specifies a:
						- SceneGroup
							- Scene in that group
								- Layout in that scene
									- Sets the 'user' property on one or more drawables in that scene
									- Set the visibility of an item
						- The duration of that schedule entry can be either:
							- A. Automatically Calculated (Implicit Duration)
								- The longest explicit or implicit duration of the media in every user property set in this Schedule Entry is the automatic/Implicit duration of the schedule entry
								- If this schedule entry is assigned a date/time, and the next entry assigned a datetime is closer than the automatic duration, this entry will only "play" until
								  the next date/time schedule entry is scheduled to "play"
							- B. Manually Set
								- If no implicit duration can be calculated, or the user desires to override the duration, the duration can be manualy set
								- However, the next hard-scheduled (date/time assigned) schedule item to come up will go live, even if this entry still has manually-specified time left to play
						- The date/time the Schedule Entry ("Item") is to play
							- The date/time can be implicit or manual ("locked")
								- If implicit, it will still be assigned a date/time, but only for human reference, based on the cumulative duration of the previously scheduled items added from the last "locked" schedule item
									- Implicit date/timed items will play immediately following the previously playing entry
									- Implicit items will NOT cut into a previously playing item - they will allow the full duration of the previous item to occur
								- Locked date/time items will cut into previously playing items to play when that date/time occurs
						
						- If, when the duration of the item playing is completed, and the next item is a "locked"/manually-set date/time item, and it is not yet that date/time, then the last implicit item following the most recet locked date/time items should play, in essence "looping" until the next "locked" date/time item
						
						- Since the Schedule Entry can specify the user property of even just one item and leave the rest unchanged, a previously playing drawable will retain its existing user property even though another drawables' user prop is scheduled to change, in effect creating overlapping schedule items.
				
				The SchedulePlayer reads the list of ScheduleItems from the active Schedule and implements the required timing logic, honoring implicit/explicit duratiosn and date/times, effecting the property/visibility changes and scenegroup/scene/layout changes as needed
					SchedulePlayer therefore needs the ability to:
						- Locate SceneGroups
							- By 'ID' or File, however they are specified in the schedule
				
				SceneGroup
					- <list of drawables>
					Scene
						- <list of drawables>
						- <list of layouts, one or more>
							- each layout contains a list of properties for each drawable in the Scene
								- rect
								- visible/not visible
								- opacity
								- (other related visual properties)
								- a qvariant 'user' property (for the user controllable property value, such as the image file to show, etc)
								
		
		Playing Functionality:
			- Two things to 'play':
				- inputs for the drawables (videos/images/etc)
				- the entire layout
					- Structure Concept:
						- Scene
							- All the elements as a bulk collection
							- Layout
								- Positions elements, shows/hides elements
			- Need a controller which:
				- loads playlists for each item and for layout
				- syncs changes to clock
				- listens for changes to playlist object and reloads accordingly
				
			- Need playlist object:
				- list of playlist items
					- item:
						- drawableId & propName/value
						- 
						
			
					





Update GLDrawable to either support:
	- Blue Alpha Blending
		- Already supports alpha masks
		- Use the blue channel (or some other channel) to control blending the pixel between BLACK and the texture color
		- This would allow drawing black lines on top of the texture using the alpha mask, instead of requiring a third texture for an overlay (in addition to the alpha mask)
	- Or a third texture for overlay on top of the alpha mask
		
Update VideoThread to support HD
	Need to create a variable length buffer
	Move timing code into buffer control
	Selectivly hold frames if falling behind 
	
	Also, get YUV420P working in raw format to allow YUV conversion on the GPU
